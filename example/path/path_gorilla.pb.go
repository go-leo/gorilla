// Code generated by protoc-gen-gorilla. DO NOT EDIT.

package path

import (
	context "context"
	gorilla "github.com/go-leo/gorilla"
	mux "github.com/gorilla/mux"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	http "net/http"
)

type BoolPathGorillaService interface {
	BoolPath(ctx context.Context, request *BoolPathRequest) (*httpbody.HttpBody, error)
}

func AppendBoolPathGorillaRoute(router *mux.Router, service BoolPathGorillaService, opts ...gorilla.Option) *mux.Router {
	options := gorilla.NewOptions(opts...)
	handler := boolPathGorillaHandler{
		service: service,
		decoder: boolPathGorillaRequestDecoder{
			unmarshalOptions:        options.UnmarshalOptions(),
			shouldFailFast:          options.ShouldFailFast(),
			onValidationErrCallback: options.OnValidationErrCallback(),
		},
		encoder: boolPathGorillaEncodeResponse{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: gorilla.DefaultEncodeError,
	}
	router.NewRoute().
		Name("/leo.gorilla.example.path.v1.BoolPath/BoolPath").
		Methods("GET").
		Path("/v1/{bool}/{opt_bool}/{wrap_bool}").
		Handler(gorilla.Chain(handler.BoolPath(), options.Middlewares()...))
	return router
}

type boolPathGorillaHandler struct {
	service      BoolPathGorillaService
	decoder      boolPathGorillaRequestDecoder
	encoder      boolPathGorillaEncodeResponse
	errorEncoder gorilla.ErrorEncoder
}

func (h boolPathGorillaHandler) BoolPath() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.BoolPath(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.BoolPath(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.BoolPath(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type boolPathGorillaRequestDecoder struct {
	unmarshalOptions        protojson.UnmarshalOptions
	shouldFailFast          bool
	onValidationErrCallback gorilla.OnValidationErrCallback
}

func (decoder boolPathGorillaRequestDecoder) BoolPath(ctx context.Context, r *http.Request) (*BoolPathRequest, error) {
	req := &BoolPathRequest{}
	if ok, err := gorilla.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, gorilla.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	vars := gorilla.FormFromMap(mux.Vars(r))
	var varErr error
	req.Bool, varErr = gorilla.DecodeForm[bool](varErr, vars, "bool", gorilla.GetBool)
	req.OptBool, varErr = gorilla.DecodeForm[*bool](varErr, vars, "opt_bool", gorilla.GetBoolPtr)
	req.WrapBool, varErr = gorilla.DecodeForm[*wrapperspb.BoolValue](varErr, vars, "wrap_bool", gorilla.GetBoolValue)
	req.Bool, varErr = gorilla.DecodeForm[bool](varErr, vars, "bool", gorilla.GetBool)
	req.OptBool, varErr = gorilla.DecodeForm[*bool](varErr, vars, "opt_bool", gorilla.GetBoolPtr)
	req.WrapBool, varErr = gorilla.DecodeForm[*wrapperspb.BoolValue](varErr, vars, "wrap_bool", gorilla.GetBoolValue)
	if varErr != nil {
		return nil, varErr
	}
	return req, gorilla.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}

type boolPathGorillaEncodeResponse struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer gorilla.ResponseTransformer
}

func (encoder boolPathGorillaEncodeResponse) BoolPath(ctx context.Context, w http.ResponseWriter, resp *httpbody.HttpBody) error {
	return gorilla.EncodeHttpBody(ctx, w, resp)
}

type Int32PathGorillaService interface {
	Int32Path(ctx context.Context, request *Int32PathRequest) (*httpbody.HttpBody, error)
}

func AppendInt32PathGorillaRoute(router *mux.Router, service Int32PathGorillaService, opts ...gorilla.Option) *mux.Router {
	options := gorilla.NewOptions(opts...)
	handler := int32PathGorillaHandler{
		service: service,
		decoder: int32PathGorillaRequestDecoder{
			unmarshalOptions:        options.UnmarshalOptions(),
			shouldFailFast:          options.ShouldFailFast(),
			onValidationErrCallback: options.OnValidationErrCallback(),
		},
		encoder: int32PathGorillaEncodeResponse{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: gorilla.DefaultEncodeError,
	}
	router.NewRoute().
		Name("/leo.gorilla.example.path.v1.Int32Path/Int32Path").
		Methods("GET").
		Path("/v1/{int32}/{sint32}/{sfixed32}/{opt_int32}/{opt_sint32}/{opt_sfixed32}/{wrap_int32}").
		Handler(gorilla.Chain(handler.Int32Path(), options.Middlewares()...))
	return router
}

type int32PathGorillaHandler struct {
	service      Int32PathGorillaService
	decoder      int32PathGorillaRequestDecoder
	encoder      int32PathGorillaEncodeResponse
	errorEncoder gorilla.ErrorEncoder
}

func (h int32PathGorillaHandler) Int32Path() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.Int32Path(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.Int32Path(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.Int32Path(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type int32PathGorillaRequestDecoder struct {
	unmarshalOptions        protojson.UnmarshalOptions
	shouldFailFast          bool
	onValidationErrCallback gorilla.OnValidationErrCallback
}

func (decoder int32PathGorillaRequestDecoder) Int32Path(ctx context.Context, r *http.Request) (*Int32PathRequest, error) {
	req := &Int32PathRequest{}
	if ok, err := gorilla.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, gorilla.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	vars := gorilla.FormFromMap(mux.Vars(r))
	var varErr error
	req.Int32, varErr = gorilla.DecodeForm[int32](varErr, vars, "int32", gorilla.GetInt32)
	req.Sint32, varErr = gorilla.DecodeForm[int32](varErr, vars, "sint32", gorilla.GetInt32)
	req.Sfixed32, varErr = gorilla.DecodeForm[int32](varErr, vars, "sfixed32", gorilla.GetInt32)
	req.OptInt32, varErr = gorilla.DecodeForm[*int32](varErr, vars, "opt_int32", gorilla.GetInt32Ptr)
	req.OptSint32, varErr = gorilla.DecodeForm[*int32](varErr, vars, "opt_sint32", gorilla.GetInt32Ptr)
	req.OptSfixed32, varErr = gorilla.DecodeForm[*int32](varErr, vars, "opt_sfixed32", gorilla.GetInt32Ptr)
	req.WrapInt32, varErr = gorilla.DecodeForm[*wrapperspb.Int32Value](varErr, vars, "wrap_int32", gorilla.GetInt32Value)
	req.Int32, varErr = gorilla.DecodeForm[int32](varErr, vars, "int32", gorilla.GetInt32)
	req.Sint32, varErr = gorilla.DecodeForm[int32](varErr, vars, "sint32", gorilla.GetInt32)
	req.Sfixed32, varErr = gorilla.DecodeForm[int32](varErr, vars, "sfixed32", gorilla.GetInt32)
	req.OptInt32, varErr = gorilla.DecodeForm[*int32](varErr, vars, "opt_int32", gorilla.GetInt32Ptr)
	req.OptSint32, varErr = gorilla.DecodeForm[*int32](varErr, vars, "opt_sint32", gorilla.GetInt32Ptr)
	req.OptSfixed32, varErr = gorilla.DecodeForm[*int32](varErr, vars, "opt_sfixed32", gorilla.GetInt32Ptr)
	req.WrapInt32, varErr = gorilla.DecodeForm[*wrapperspb.Int32Value](varErr, vars, "wrap_int32", gorilla.GetInt32Value)
	if varErr != nil {
		return nil, varErr
	}
	return req, gorilla.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}

type int32PathGorillaEncodeResponse struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer gorilla.ResponseTransformer
}

func (encoder int32PathGorillaEncodeResponse) Int32Path(ctx context.Context, w http.ResponseWriter, resp *httpbody.HttpBody) error {
	return gorilla.EncodeHttpBody(ctx, w, resp)
}

type Int64PathGorillaService interface {
	Int64Path(ctx context.Context, request *Int64PathRequest) (*httpbody.HttpBody, error)
}

func AppendInt64PathGorillaRoute(router *mux.Router, service Int64PathGorillaService, opts ...gorilla.Option) *mux.Router {
	options := gorilla.NewOptions(opts...)
	handler := int64PathGorillaHandler{
		service: service,
		decoder: int64PathGorillaRequestDecoder{
			unmarshalOptions:        options.UnmarshalOptions(),
			shouldFailFast:          options.ShouldFailFast(),
			onValidationErrCallback: options.OnValidationErrCallback(),
		},
		encoder: int64PathGorillaEncodeResponse{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: gorilla.DefaultEncodeError,
	}
	router.NewRoute().
		Name("/leo.gorilla.example.path.v1.Int64Path/Int64Path").
		Methods("GET").
		Path("/v1/{int64}/{sint64}/{sfixed64}/{opt_int64}/{opt_sint64}/{opt_sfixed64}/{wrap_int64}").
		Handler(gorilla.Chain(handler.Int64Path(), options.Middlewares()...))
	return router
}

type int64PathGorillaHandler struct {
	service      Int64PathGorillaService
	decoder      int64PathGorillaRequestDecoder
	encoder      int64PathGorillaEncodeResponse
	errorEncoder gorilla.ErrorEncoder
}

func (h int64PathGorillaHandler) Int64Path() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.Int64Path(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.Int64Path(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.Int64Path(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type int64PathGorillaRequestDecoder struct {
	unmarshalOptions        protojson.UnmarshalOptions
	shouldFailFast          bool
	onValidationErrCallback gorilla.OnValidationErrCallback
}

func (decoder int64PathGorillaRequestDecoder) Int64Path(ctx context.Context, r *http.Request) (*Int64PathRequest, error) {
	req := &Int64PathRequest{}
	if ok, err := gorilla.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, gorilla.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	vars := gorilla.FormFromMap(mux.Vars(r))
	var varErr error
	req.Int64, varErr = gorilla.DecodeForm[int64](varErr, vars, "int64", gorilla.GetInt64)
	req.Sint64, varErr = gorilla.DecodeForm[int64](varErr, vars, "sint64", gorilla.GetInt64)
	req.Sfixed64, varErr = gorilla.DecodeForm[int64](varErr, vars, "sfixed64", gorilla.GetInt64)
	req.OptInt64, varErr = gorilla.DecodeForm[*int64](varErr, vars, "opt_int64", gorilla.GetInt64Ptr)
	req.OptSint64, varErr = gorilla.DecodeForm[*int64](varErr, vars, "opt_sint64", gorilla.GetInt64Ptr)
	req.OptSfixed64, varErr = gorilla.DecodeForm[*int64](varErr, vars, "opt_sfixed64", gorilla.GetInt64Ptr)
	req.WrapInt64, varErr = gorilla.DecodeForm[*wrapperspb.Int64Value](varErr, vars, "wrap_int64", gorilla.GetInt64Value)
	req.Int64, varErr = gorilla.DecodeForm[int64](varErr, vars, "int64", gorilla.GetInt64)
	req.Sint64, varErr = gorilla.DecodeForm[int64](varErr, vars, "sint64", gorilla.GetInt64)
	req.Sfixed64, varErr = gorilla.DecodeForm[int64](varErr, vars, "sfixed64", gorilla.GetInt64)
	req.OptInt64, varErr = gorilla.DecodeForm[*int64](varErr, vars, "opt_int64", gorilla.GetInt64Ptr)
	req.OptSint64, varErr = gorilla.DecodeForm[*int64](varErr, vars, "opt_sint64", gorilla.GetInt64Ptr)
	req.OptSfixed64, varErr = gorilla.DecodeForm[*int64](varErr, vars, "opt_sfixed64", gorilla.GetInt64Ptr)
	req.WrapInt64, varErr = gorilla.DecodeForm[*wrapperspb.Int64Value](varErr, vars, "wrap_int64", gorilla.GetInt64Value)
	if varErr != nil {
		return nil, varErr
	}
	return req, gorilla.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}

type int64PathGorillaEncodeResponse struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer gorilla.ResponseTransformer
}

func (encoder int64PathGorillaEncodeResponse) Int64Path(ctx context.Context, w http.ResponseWriter, resp *httpbody.HttpBody) error {
	return gorilla.EncodeHttpBody(ctx, w, resp)
}

type Uint32PathGorillaService interface {
	Uint32Path(ctx context.Context, request *Uint32PathRequest) (*httpbody.HttpBody, error)
}

func AppendUint32PathGorillaRoute(router *mux.Router, service Uint32PathGorillaService, opts ...gorilla.Option) *mux.Router {
	options := gorilla.NewOptions(opts...)
	handler := uint32PathGorillaHandler{
		service: service,
		decoder: uint32PathGorillaRequestDecoder{
			unmarshalOptions:        options.UnmarshalOptions(),
			shouldFailFast:          options.ShouldFailFast(),
			onValidationErrCallback: options.OnValidationErrCallback(),
		},
		encoder: uint32PathGorillaEncodeResponse{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: gorilla.DefaultEncodeError,
	}
	router.NewRoute().
		Name("/leo.gorilla.example.path.v1.Uint32Path/Uint32Path").
		Methods("GET").
		Path("/v1/{uint32}/{fixed32}/{opt_uint32}/{opt_fixed32}/{wrap_uint32}").
		Handler(gorilla.Chain(handler.Uint32Path(), options.Middlewares()...))
	return router
}

type uint32PathGorillaHandler struct {
	service      Uint32PathGorillaService
	decoder      uint32PathGorillaRequestDecoder
	encoder      uint32PathGorillaEncodeResponse
	errorEncoder gorilla.ErrorEncoder
}

func (h uint32PathGorillaHandler) Uint32Path() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.Uint32Path(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.Uint32Path(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.Uint32Path(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type uint32PathGorillaRequestDecoder struct {
	unmarshalOptions        protojson.UnmarshalOptions
	shouldFailFast          bool
	onValidationErrCallback gorilla.OnValidationErrCallback
}

func (decoder uint32PathGorillaRequestDecoder) Uint32Path(ctx context.Context, r *http.Request) (*Uint32PathRequest, error) {
	req := &Uint32PathRequest{}
	if ok, err := gorilla.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, gorilla.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	vars := gorilla.FormFromMap(mux.Vars(r))
	var varErr error
	req.Uint32, varErr = gorilla.DecodeForm[uint32](varErr, vars, "uint32", gorilla.GetUint32)
	req.Fixed32, varErr = gorilla.DecodeForm[uint32](varErr, vars, "fixed32", gorilla.GetUint32)
	req.OptUint32, varErr = gorilla.DecodeForm[*uint32](varErr, vars, "opt_uint32", gorilla.GetUint32Ptr)
	req.OptFixed32, varErr = gorilla.DecodeForm[*uint32](varErr, vars, "opt_fixed32", gorilla.GetUint32Ptr)
	req.WrapUint32, varErr = gorilla.DecodeForm[*wrapperspb.UInt32Value](varErr, vars, "wrap_uint32", gorilla.GetUint32Value)
	req.Uint32, varErr = gorilla.DecodeForm[uint32](varErr, vars, "uint32", gorilla.GetUint32)
	req.Fixed32, varErr = gorilla.DecodeForm[uint32](varErr, vars, "fixed32", gorilla.GetUint32)
	req.OptUint32, varErr = gorilla.DecodeForm[*uint32](varErr, vars, "opt_uint32", gorilla.GetUint32Ptr)
	req.OptFixed32, varErr = gorilla.DecodeForm[*uint32](varErr, vars, "opt_fixed32", gorilla.GetUint32Ptr)
	req.WrapUint32, varErr = gorilla.DecodeForm[*wrapperspb.UInt32Value](varErr, vars, "wrap_uint32", gorilla.GetUint32Value)
	if varErr != nil {
		return nil, varErr
	}
	return req, gorilla.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}

type uint32PathGorillaEncodeResponse struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer gorilla.ResponseTransformer
}

func (encoder uint32PathGorillaEncodeResponse) Uint32Path(ctx context.Context, w http.ResponseWriter, resp *httpbody.HttpBody) error {
	return gorilla.EncodeHttpBody(ctx, w, resp)
}

type Uint64PathGorillaService interface {
	Uint64Path(ctx context.Context, request *Uint64PathRequest) (*httpbody.HttpBody, error)
}

func AppendUint64PathGorillaRoute(router *mux.Router, service Uint64PathGorillaService, opts ...gorilla.Option) *mux.Router {
	options := gorilla.NewOptions(opts...)
	handler := uint64PathGorillaHandler{
		service: service,
		decoder: uint64PathGorillaRequestDecoder{
			unmarshalOptions:        options.UnmarshalOptions(),
			shouldFailFast:          options.ShouldFailFast(),
			onValidationErrCallback: options.OnValidationErrCallback(),
		},
		encoder: uint64PathGorillaEncodeResponse{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: gorilla.DefaultEncodeError,
	}
	router.NewRoute().
		Name("/leo.gorilla.example.path.v1.Uint64Path/Uint64Path").
		Methods("GET").
		Path("/v1/{uint64}/{fixed64}/{opt_uint64}/{opt_fixed64}/{wrap_uint64}").
		Handler(gorilla.Chain(handler.Uint64Path(), options.Middlewares()...))
	return router
}

type uint64PathGorillaHandler struct {
	service      Uint64PathGorillaService
	decoder      uint64PathGorillaRequestDecoder
	encoder      uint64PathGorillaEncodeResponse
	errorEncoder gorilla.ErrorEncoder
}

func (h uint64PathGorillaHandler) Uint64Path() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.Uint64Path(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.Uint64Path(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.Uint64Path(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type uint64PathGorillaRequestDecoder struct {
	unmarshalOptions        protojson.UnmarshalOptions
	shouldFailFast          bool
	onValidationErrCallback gorilla.OnValidationErrCallback
}

func (decoder uint64PathGorillaRequestDecoder) Uint64Path(ctx context.Context, r *http.Request) (*Uint64PathRequest, error) {
	req := &Uint64PathRequest{}
	if ok, err := gorilla.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, gorilla.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	vars := gorilla.FormFromMap(mux.Vars(r))
	var varErr error
	req.Uint64, varErr = gorilla.DecodeForm[uint64](varErr, vars, "uint64", gorilla.GetUint64)
	req.Fixed64, varErr = gorilla.DecodeForm[uint64](varErr, vars, "fixed64", gorilla.GetUint64)
	req.OptUint64, varErr = gorilla.DecodeForm[*uint64](varErr, vars, "opt_uint64", gorilla.GetUint64Ptr)
	req.OptFixed64, varErr = gorilla.DecodeForm[*uint64](varErr, vars, "opt_fixed64", gorilla.GetUint64Ptr)
	req.WrapUint64, varErr = gorilla.DecodeForm[*wrapperspb.UInt64Value](varErr, vars, "wrap_uint64", gorilla.GetUint64Value)
	req.Uint64, varErr = gorilla.DecodeForm[uint64](varErr, vars, "uint64", gorilla.GetUint64)
	req.Fixed64, varErr = gorilla.DecodeForm[uint64](varErr, vars, "fixed64", gorilla.GetUint64)
	req.OptUint64, varErr = gorilla.DecodeForm[*uint64](varErr, vars, "opt_uint64", gorilla.GetUint64Ptr)
	req.OptFixed64, varErr = gorilla.DecodeForm[*uint64](varErr, vars, "opt_fixed64", gorilla.GetUint64Ptr)
	req.WrapUint64, varErr = gorilla.DecodeForm[*wrapperspb.UInt64Value](varErr, vars, "wrap_uint64", gorilla.GetUint64Value)
	if varErr != nil {
		return nil, varErr
	}
	return req, gorilla.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}

type uint64PathGorillaEncodeResponse struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer gorilla.ResponseTransformer
}

func (encoder uint64PathGorillaEncodeResponse) Uint64Path(ctx context.Context, w http.ResponseWriter, resp *httpbody.HttpBody) error {
	return gorilla.EncodeHttpBody(ctx, w, resp)
}

type FloatPathGorillaService interface {
	FloatPath(ctx context.Context, request *FloatPathRequest) (*httpbody.HttpBody, error)
}

func AppendFloatPathGorillaRoute(router *mux.Router, service FloatPathGorillaService, opts ...gorilla.Option) *mux.Router {
	options := gorilla.NewOptions(opts...)
	handler := floatPathGorillaHandler{
		service: service,
		decoder: floatPathGorillaRequestDecoder{
			unmarshalOptions:        options.UnmarshalOptions(),
			shouldFailFast:          options.ShouldFailFast(),
			onValidationErrCallback: options.OnValidationErrCallback(),
		},
		encoder: floatPathGorillaEncodeResponse{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: gorilla.DefaultEncodeError,
	}
	router.NewRoute().
		Name("/leo.gorilla.example.path.v1.FloatPath/FloatPath").
		Methods("GET").
		Path("/v1/{float}/{opt_float}/{wrap_float}").
		Handler(gorilla.Chain(handler.FloatPath(), options.Middlewares()...))
	return router
}

type floatPathGorillaHandler struct {
	service      FloatPathGorillaService
	decoder      floatPathGorillaRequestDecoder
	encoder      floatPathGorillaEncodeResponse
	errorEncoder gorilla.ErrorEncoder
}

func (h floatPathGorillaHandler) FloatPath() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.FloatPath(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.FloatPath(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.FloatPath(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type floatPathGorillaRequestDecoder struct {
	unmarshalOptions        protojson.UnmarshalOptions
	shouldFailFast          bool
	onValidationErrCallback gorilla.OnValidationErrCallback
}

func (decoder floatPathGorillaRequestDecoder) FloatPath(ctx context.Context, r *http.Request) (*FloatPathRequest, error) {
	req := &FloatPathRequest{}
	if ok, err := gorilla.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, gorilla.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	vars := gorilla.FormFromMap(mux.Vars(r))
	var varErr error
	req.Float, varErr = gorilla.DecodeForm[float32](varErr, vars, "float", gorilla.GetFloat32)
	req.OptFloat, varErr = gorilla.DecodeForm[*float32](varErr, vars, "opt_float", gorilla.GetFloat32Ptr)
	req.WrapFloat, varErr = gorilla.DecodeForm[*wrapperspb.FloatValue](varErr, vars, "wrap_float", gorilla.GetFloat32Value)
	req.Float, varErr = gorilla.DecodeForm[float32](varErr, vars, "float", gorilla.GetFloat32)
	req.OptFloat, varErr = gorilla.DecodeForm[*float32](varErr, vars, "opt_float", gorilla.GetFloat32Ptr)
	req.WrapFloat, varErr = gorilla.DecodeForm[*wrapperspb.FloatValue](varErr, vars, "wrap_float", gorilla.GetFloat32Value)
	if varErr != nil {
		return nil, varErr
	}
	return req, gorilla.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}

type floatPathGorillaEncodeResponse struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer gorilla.ResponseTransformer
}

func (encoder floatPathGorillaEncodeResponse) FloatPath(ctx context.Context, w http.ResponseWriter, resp *httpbody.HttpBody) error {
	return gorilla.EncodeHttpBody(ctx, w, resp)
}

type DoublePathGorillaService interface {
	DoublePath(ctx context.Context, request *DoublePathRequest) (*httpbody.HttpBody, error)
}

func AppendDoublePathGorillaRoute(router *mux.Router, service DoublePathGorillaService, opts ...gorilla.Option) *mux.Router {
	options := gorilla.NewOptions(opts...)
	handler := doublePathGorillaHandler{
		service: service,
		decoder: doublePathGorillaRequestDecoder{
			unmarshalOptions:        options.UnmarshalOptions(),
			shouldFailFast:          options.ShouldFailFast(),
			onValidationErrCallback: options.OnValidationErrCallback(),
		},
		encoder: doublePathGorillaEncodeResponse{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: gorilla.DefaultEncodeError,
	}
	router.NewRoute().
		Name("/leo.gorilla.example.path.v1.DoublePath/DoublePath").
		Methods("GET").
		Path("/v1/{double}/{opt_double}/{wrap_double}").
		Handler(gorilla.Chain(handler.DoublePath(), options.Middlewares()...))
	return router
}

type doublePathGorillaHandler struct {
	service      DoublePathGorillaService
	decoder      doublePathGorillaRequestDecoder
	encoder      doublePathGorillaEncodeResponse
	errorEncoder gorilla.ErrorEncoder
}

func (h doublePathGorillaHandler) DoublePath() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.DoublePath(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.DoublePath(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.DoublePath(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type doublePathGorillaRequestDecoder struct {
	unmarshalOptions        protojson.UnmarshalOptions
	shouldFailFast          bool
	onValidationErrCallback gorilla.OnValidationErrCallback
}

func (decoder doublePathGorillaRequestDecoder) DoublePath(ctx context.Context, r *http.Request) (*DoublePathRequest, error) {
	req := &DoublePathRequest{}
	if ok, err := gorilla.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, gorilla.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	vars := gorilla.FormFromMap(mux.Vars(r))
	var varErr error
	req.Double, varErr = gorilla.DecodeForm[float64](varErr, vars, "double", gorilla.GetFloat64)
	req.OptDouble, varErr = gorilla.DecodeForm[*float64](varErr, vars, "opt_double", gorilla.GetFloat64Ptr)
	req.WrapDouble, varErr = gorilla.DecodeForm[*wrapperspb.DoubleValue](varErr, vars, "wrap_double", gorilla.GetFloat64Value)
	req.Double, varErr = gorilla.DecodeForm[float64](varErr, vars, "double", gorilla.GetFloat64)
	req.OptDouble, varErr = gorilla.DecodeForm[*float64](varErr, vars, "opt_double", gorilla.GetFloat64Ptr)
	req.WrapDouble, varErr = gorilla.DecodeForm[*wrapperspb.DoubleValue](varErr, vars, "wrap_double", gorilla.GetFloat64Value)
	if varErr != nil {
		return nil, varErr
	}
	return req, gorilla.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}

type doublePathGorillaEncodeResponse struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer gorilla.ResponseTransformer
}

func (encoder doublePathGorillaEncodeResponse) DoublePath(ctx context.Context, w http.ResponseWriter, resp *httpbody.HttpBody) error {
	return gorilla.EncodeHttpBody(ctx, w, resp)
}

type StringPathGorillaService interface {
	StringPath(ctx context.Context, request *StringPathRequest) (*httpbody.HttpBody, error)
}

func AppendStringPathGorillaRoute(router *mux.Router, service StringPathGorillaService, opts ...gorilla.Option) *mux.Router {
	options := gorilla.NewOptions(opts...)
	handler := stringPathGorillaHandler{
		service: service,
		decoder: stringPathGorillaRequestDecoder{
			unmarshalOptions:        options.UnmarshalOptions(),
			shouldFailFast:          options.ShouldFailFast(),
			onValidationErrCallback: options.OnValidationErrCallback(),
		},
		encoder: stringPathGorillaEncodeResponse{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: gorilla.DefaultEncodeError,
	}
	router.NewRoute().
		Name("/leo.gorilla.example.path.v1.StringPath/StringPath").
		Methods("GET").
		Path("/v1/{string}/{opt_string}/{wrap_string}").
		Handler(gorilla.Chain(handler.StringPath(), options.Middlewares()...))
	return router
}

type stringPathGorillaHandler struct {
	service      StringPathGorillaService
	decoder      stringPathGorillaRequestDecoder
	encoder      stringPathGorillaEncodeResponse
	errorEncoder gorilla.ErrorEncoder
}

func (h stringPathGorillaHandler) StringPath() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.StringPath(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.StringPath(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.StringPath(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type stringPathGorillaRequestDecoder struct {
	unmarshalOptions        protojson.UnmarshalOptions
	shouldFailFast          bool
	onValidationErrCallback gorilla.OnValidationErrCallback
}

func (decoder stringPathGorillaRequestDecoder) StringPath(ctx context.Context, r *http.Request) (*StringPathRequest, error) {
	req := &StringPathRequest{}
	if ok, err := gorilla.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, gorilla.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	vars := gorilla.FormFromMap(mux.Vars(r))
	var varErr error
	req.String_ = vars.Get("string")
	req.OptString = proto.String(vars.Get("opt_string"))
	req.WrapString = wrapperspb.String(vars.Get("wrap_string"))
	req.String_ = vars.Get("string")
	req.OptString = proto.String(vars.Get("opt_string"))
	req.WrapString = wrapperspb.String(vars.Get("wrap_string"))
	if varErr != nil {
		return nil, varErr
	}
	return req, gorilla.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}

type stringPathGorillaEncodeResponse struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer gorilla.ResponseTransformer
}

func (encoder stringPathGorillaEncodeResponse) StringPath(ctx context.Context, w http.ResponseWriter, resp *httpbody.HttpBody) error {
	return gorilla.EncodeHttpBody(ctx, w, resp)
}

type EnumPathGorillaService interface {
	EnumPath(ctx context.Context, request *EnumPathRequest) (*httpbody.HttpBody, error)
}

func AppendEnumPathGorillaRoute(router *mux.Router, service EnumPathGorillaService, opts ...gorilla.Option) *mux.Router {
	options := gorilla.NewOptions(opts...)
	handler := enumPathGorillaHandler{
		service: service,
		decoder: enumPathGorillaRequestDecoder{
			unmarshalOptions:        options.UnmarshalOptions(),
			shouldFailFast:          options.ShouldFailFast(),
			onValidationErrCallback: options.OnValidationErrCallback(),
		},
		encoder: enumPathGorillaEncodeResponse{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: gorilla.DefaultEncodeError,
	}
	router.NewRoute().
		Name("/leo.gorilla.example.path.v1.EnumPath/EnumPath").
		Methods("GET").
		Path("/v1/{status}/{opt_status}").
		Handler(gorilla.Chain(handler.EnumPath(), options.Middlewares()...))
	return router
}

type enumPathGorillaHandler struct {
	service      EnumPathGorillaService
	decoder      enumPathGorillaRequestDecoder
	encoder      enumPathGorillaEncodeResponse
	errorEncoder gorilla.ErrorEncoder
}

func (h enumPathGorillaHandler) EnumPath() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.EnumPath(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.EnumPath(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.EnumPath(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type enumPathGorillaRequestDecoder struct {
	unmarshalOptions        protojson.UnmarshalOptions
	shouldFailFast          bool
	onValidationErrCallback gorilla.OnValidationErrCallback
}

func (decoder enumPathGorillaRequestDecoder) EnumPath(ctx context.Context, r *http.Request) (*EnumPathRequest, error) {
	req := &EnumPathRequest{}
	if ok, err := gorilla.CustomDecodeRequest(ctx, r, req); ok && err != nil {
		return nil, err
	} else if ok && err == nil {
		return req, gorilla.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
	}
	vars := gorilla.FormFromMap(mux.Vars(r))
	var varErr error
	req.Status, varErr = gorilla.DecodeForm[EnumPathRequest_Status](varErr, vars, "status", gorilla.GetInt[EnumPathRequest_Status])
	req.OptStatus, varErr = gorilla.DecodeForm[*EnumPathRequest_Status](varErr, vars, "opt_status", gorilla.GetIntPtr[EnumPathRequest_Status])
	req.Status, varErr = gorilla.DecodeForm[EnumPathRequest_Status](varErr, vars, "status", gorilla.GetInt[EnumPathRequest_Status])
	req.OptStatus, varErr = gorilla.DecodeForm[*EnumPathRequest_Status](varErr, vars, "opt_status", gorilla.GetIntPtr[EnumPathRequest_Status])
	if varErr != nil {
		return nil, varErr
	}
	return req, gorilla.ValidateRequest(ctx, req, decoder.shouldFailFast, decoder.onValidationErrCallback)
}

type enumPathGorillaEncodeResponse struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer gorilla.ResponseTransformer
}

func (encoder enumPathGorillaEncodeResponse) EnumPath(ctx context.Context, w http.ResponseWriter, resp *httpbody.HttpBody) error {
	return gorilla.EncodeHttpBody(ctx, w, resp)
}
