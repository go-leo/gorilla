// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.3
// source: path/path.proto

package path

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnumPathRequest_Status int32

const (
	EnumPathRequest_UNKNOWN       EnumPathRequest_Status = 0
	EnumPathRequest_OK            EnumPathRequest_Status = 1
	EnumPathRequest_CANCELLED     EnumPathRequest_Status = 2
	EnumPathRequest_UNKNOWN_ERROR EnumPathRequest_Status = 3
)

// Enum value maps for EnumPathRequest_Status.
var (
	EnumPathRequest_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "OK",
		2: "CANCELLED",
		3: "UNKNOWN_ERROR",
	}
	EnumPathRequest_Status_value = map[string]int32{
		"UNKNOWN":       0,
		"OK":            1,
		"CANCELLED":     2,
		"UNKNOWN_ERROR": 3,
	}
)

func (x EnumPathRequest_Status) Enum() *EnumPathRequest_Status {
	p := new(EnumPathRequest_Status)
	*p = x
	return p
}

func (x EnumPathRequest_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumPathRequest_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_path_path_proto_enumTypes[0].Descriptor()
}

func (EnumPathRequest_Status) Type() protoreflect.EnumType {
	return &file_path_path_proto_enumTypes[0]
}

func (x EnumPathRequest_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumPathRequest_Status.Descriptor instead.
func (EnumPathRequest_Status) EnumDescriptor() ([]byte, []int) {
	return file_path_path_proto_rawDescGZIP(), []int{8, 0}
}

type BoolPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bool     bool                  `protobuf:"varint,2,opt,name=bool,proto3" json:"bool,omitempty"`
	OptBool  *bool                 `protobuf:"varint,22,opt,name=opt_bool,json=optBool,proto3,oneof" json:"opt_bool,omitempty"`
	WrapBool *wrapperspb.BoolValue `protobuf:"bytes,48,opt,name=wrap_bool,json=wrapBool,proto3" json:"wrap_bool,omitempty"`
}

func (x *BoolPathRequest) Reset() {
	*x = BoolPathRequest{}
	mi := &file_path_path_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoolPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolPathRequest) ProtoMessage() {}

func (x *BoolPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_path_path_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolPathRequest.ProtoReflect.Descriptor instead.
func (*BoolPathRequest) Descriptor() ([]byte, []int) {
	return file_path_path_proto_rawDescGZIP(), []int{0}
}

func (x *BoolPathRequest) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *BoolPathRequest) GetOptBool() bool {
	if x != nil && x.OptBool != nil {
		return *x.OptBool
	}
	return false
}

func (x *BoolPathRequest) GetWrapBool() *wrapperspb.BoolValue {
	if x != nil {
		return x.WrapBool
	}
	return nil
}

type Int32PathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int32       int32                  `protobuf:"varint,3,opt,name=int32,proto3" json:"int32,omitempty"`
	Sint32      int32                  `protobuf:"zigzag32,4,opt,name=sint32,proto3" json:"sint32,omitempty"`
	Sfixed32    int32                  `protobuf:"fixed32,10,opt,name=sfixed32,proto3" json:"sfixed32,omitempty"`
	OptInt32    *int32                 `protobuf:"varint,23,opt,name=opt_int32,json=optInt32,proto3,oneof" json:"opt_int32,omitempty"`
	OptSint32   *int32                 `protobuf:"zigzag32,24,opt,name=opt_sint32,json=optSint32,proto3,oneof" json:"opt_sint32,omitempty"`
	OptSfixed32 *int32                 `protobuf:"fixed32,30,opt,name=opt_sfixed32,json=optSfixed32,proto3,oneof" json:"opt_sfixed32,omitempty"`
	WrapInt32   *wrapperspb.Int32Value `protobuf:"bytes,46,opt,name=wrap_int32,json=wrapInt32,proto3" json:"wrap_int32,omitempty"`
}

func (x *Int32PathRequest) Reset() {
	*x = Int32PathRequest{}
	mi := &file_path_path_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int32PathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32PathRequest) ProtoMessage() {}

func (x *Int32PathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_path_path_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32PathRequest.ProtoReflect.Descriptor instead.
func (*Int32PathRequest) Descriptor() ([]byte, []int) {
	return file_path_path_proto_rawDescGZIP(), []int{1}
}

func (x *Int32PathRequest) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *Int32PathRequest) GetSint32() int32 {
	if x != nil {
		return x.Sint32
	}
	return 0
}

func (x *Int32PathRequest) GetSfixed32() int32 {
	if x != nil {
		return x.Sfixed32
	}
	return 0
}

func (x *Int32PathRequest) GetOptInt32() int32 {
	if x != nil && x.OptInt32 != nil {
		return *x.OptInt32
	}
	return 0
}

func (x *Int32PathRequest) GetOptSint32() int32 {
	if x != nil && x.OptSint32 != nil {
		return *x.OptSint32
	}
	return 0
}

func (x *Int32PathRequest) GetOptSfixed32() int32 {
	if x != nil && x.OptSfixed32 != nil {
		return *x.OptSfixed32
	}
	return 0
}

func (x *Int32PathRequest) GetWrapInt32() *wrapperspb.Int32Value {
	if x != nil {
		return x.WrapInt32
	}
	return nil
}

type Int64PathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int64       int64                  `protobuf:"varint,7,opt,name=int64,proto3" json:"int64,omitempty"`
	Sint64      int64                  `protobuf:"zigzag64,8,opt,name=sint64,proto3" json:"sint64,omitempty"`
	Sfixed64    int64                  `protobuf:"fixed64,13,opt,name=sfixed64,proto3" json:"sfixed64,omitempty"`
	OptInt64    *int64                 `protobuf:"varint,27,opt,name=opt_int64,json=optInt64,proto3,oneof" json:"opt_int64,omitempty"`
	OptSint64   *int64                 `protobuf:"zigzag64,28,opt,name=opt_sint64,json=optSint64,proto3,oneof" json:"opt_sint64,omitempty"`
	OptSfixed64 *int64                 `protobuf:"fixed64,33,opt,name=opt_sfixed64,json=optSfixed64,proto3,oneof" json:"opt_sfixed64,omitempty"`
	WrapInt64   *wrapperspb.Int64Value `protobuf:"bytes,44,opt,name=wrap_int64,json=wrapInt64,proto3" json:"wrap_int64,omitempty"`
}

func (x *Int64PathRequest) Reset() {
	*x = Int64PathRequest{}
	mi := &file_path_path_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int64PathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64PathRequest) ProtoMessage() {}

func (x *Int64PathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_path_path_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64PathRequest.ProtoReflect.Descriptor instead.
func (*Int64PathRequest) Descriptor() ([]byte, []int) {
	return file_path_path_proto_rawDescGZIP(), []int{2}
}

func (x *Int64PathRequest) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *Int64PathRequest) GetSint64() int64 {
	if x != nil {
		return x.Sint64
	}
	return 0
}

func (x *Int64PathRequest) GetSfixed64() int64 {
	if x != nil {
		return x.Sfixed64
	}
	return 0
}

func (x *Int64PathRequest) GetOptInt64() int64 {
	if x != nil && x.OptInt64 != nil {
		return *x.OptInt64
	}
	return 0
}

func (x *Int64PathRequest) GetOptSint64() int64 {
	if x != nil && x.OptSint64 != nil {
		return *x.OptSint64
	}
	return 0
}

func (x *Int64PathRequest) GetOptSfixed64() int64 {
	if x != nil && x.OptSfixed64 != nil {
		return *x.OptSfixed64
	}
	return 0
}

func (x *Int64PathRequest) GetWrapInt64() *wrapperspb.Int64Value {
	if x != nil {
		return x.WrapInt64
	}
	return nil
}

type Uint32PathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uint32     uint32                  `protobuf:"varint,6,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Fixed32    uint32                  `protobuf:"fixed32,11,opt,name=fixed32,proto3" json:"fixed32,omitempty"`
	OptUint32  *uint32                 `protobuf:"varint,26,opt,name=opt_uint32,json=optUint32,proto3,oneof" json:"opt_uint32,omitempty"`
	OptFixed32 *uint32                 `protobuf:"fixed32,31,opt,name=opt_fixed32,json=optFixed32,proto3,oneof" json:"opt_fixed32,omitempty"`
	WrapUint32 *wrapperspb.UInt32Value `protobuf:"bytes,47,opt,name=wrap_uint32,json=wrapUint32,proto3" json:"wrap_uint32,omitempty"`
}

func (x *Uint32PathRequest) Reset() {
	*x = Uint32PathRequest{}
	mi := &file_path_path_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Uint32PathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32PathRequest) ProtoMessage() {}

func (x *Uint32PathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_path_path_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32PathRequest.ProtoReflect.Descriptor instead.
func (*Uint32PathRequest) Descriptor() ([]byte, []int) {
	return file_path_path_proto_rawDescGZIP(), []int{3}
}

func (x *Uint32PathRequest) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *Uint32PathRequest) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *Uint32PathRequest) GetOptUint32() uint32 {
	if x != nil && x.OptUint32 != nil {
		return *x.OptUint32
	}
	return 0
}

func (x *Uint32PathRequest) GetOptFixed32() uint32 {
	if x != nil && x.OptFixed32 != nil {
		return *x.OptFixed32
	}
	return 0
}

func (x *Uint32PathRequest) GetWrapUint32() *wrapperspb.UInt32Value {
	if x != nil {
		return x.WrapUint32
	}
	return nil
}

type Uint64PathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uint64     uint64                  `protobuf:"varint,9,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Fixed64    uint64                  `protobuf:"fixed64,14,opt,name=fixed64,proto3" json:"fixed64,omitempty"`
	OptUint64  *uint64                 `protobuf:"varint,29,opt,name=opt_uint64,json=optUint64,proto3,oneof" json:"opt_uint64,omitempty"`
	OptFixed64 *uint64                 `protobuf:"fixed64,34,opt,name=opt_fixed64,json=optFixed64,proto3,oneof" json:"opt_fixed64,omitempty"`
	WrapUint64 *wrapperspb.UInt64Value `protobuf:"bytes,45,opt,name=wrap_uint64,json=wrapUint64,proto3" json:"wrap_uint64,omitempty"`
}

func (x *Uint64PathRequest) Reset() {
	*x = Uint64PathRequest{}
	mi := &file_path_path_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Uint64PathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint64PathRequest) ProtoMessage() {}

func (x *Uint64PathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_path_path_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint64PathRequest.ProtoReflect.Descriptor instead.
func (*Uint64PathRequest) Descriptor() ([]byte, []int) {
	return file_path_path_proto_rawDescGZIP(), []int{4}
}

func (x *Uint64PathRequest) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *Uint64PathRequest) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *Uint64PathRequest) GetOptUint64() uint64 {
	if x != nil && x.OptUint64 != nil {
		return *x.OptUint64
	}
	return 0
}

func (x *Uint64PathRequest) GetOptFixed64() uint64 {
	if x != nil && x.OptFixed64 != nil {
		return *x.OptFixed64
	}
	return 0
}

func (x *Uint64PathRequest) GetWrapUint64() *wrapperspb.UInt64Value {
	if x != nil {
		return x.WrapUint64
	}
	return nil
}

type FloatPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Float     float32                `protobuf:"fixed32,12,opt,name=float,proto3" json:"float,omitempty"`
	OptFloat  *float32               `protobuf:"fixed32,32,opt,name=opt_float,json=optFloat,proto3,oneof" json:"opt_float,omitempty"`
	WrapFloat *wrapperspb.FloatValue `protobuf:"bytes,43,opt,name=wrap_float,json=wrapFloat,proto3" json:"wrap_float,omitempty"`
}

func (x *FloatPathRequest) Reset() {
	*x = FloatPathRequest{}
	mi := &file_path_path_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FloatPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatPathRequest) ProtoMessage() {}

func (x *FloatPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_path_path_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatPathRequest.ProtoReflect.Descriptor instead.
func (*FloatPathRequest) Descriptor() ([]byte, []int) {
	return file_path_path_proto_rawDescGZIP(), []int{5}
}

func (x *FloatPathRequest) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *FloatPathRequest) GetOptFloat() float32 {
	if x != nil && x.OptFloat != nil {
		return *x.OptFloat
	}
	return 0
}

func (x *FloatPathRequest) GetWrapFloat() *wrapperspb.FloatValue {
	if x != nil {
		return x.WrapFloat
	}
	return nil
}

type DoublePathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Double     float64                 `protobuf:"fixed64,15,opt,name=double,proto3" json:"double,omitempty"`
	OptDouble  *float64                `protobuf:"fixed64,35,opt,name=opt_double,json=optDouble,proto3,oneof" json:"opt_double,omitempty"`
	WrapDouble *wrapperspb.DoubleValue `protobuf:"bytes,42,opt,name=wrap_double,json=wrapDouble,proto3" json:"wrap_double,omitempty"`
}

func (x *DoublePathRequest) Reset() {
	*x = DoublePathRequest{}
	mi := &file_path_path_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoublePathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoublePathRequest) ProtoMessage() {}

func (x *DoublePathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_path_path_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoublePathRequest.ProtoReflect.Descriptor instead.
func (*DoublePathRequest) Descriptor() ([]byte, []int) {
	return file_path_path_proto_rawDescGZIP(), []int{6}
}

func (x *DoublePathRequest) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *DoublePathRequest) GetOptDouble() float64 {
	if x != nil && x.OptDouble != nil {
		return *x.OptDouble
	}
	return 0
}

func (x *DoublePathRequest) GetWrapDouble() *wrapperspb.DoubleValue {
	if x != nil {
		return x.WrapDouble
	}
	return nil
}

type StringPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_    string                  `protobuf:"bytes,16,opt,name=string,proto3" json:"string,omitempty"`
	OptString  *string                 `protobuf:"bytes,36,opt,name=opt_string,json=optString,proto3,oneof" json:"opt_string,omitempty"`
	WrapString *wrapperspb.StringValue `protobuf:"bytes,49,opt,name=wrap_string,json=wrapString,proto3" json:"wrap_string,omitempty"`
}

func (x *StringPathRequest) Reset() {
	*x = StringPathRequest{}
	mi := &file_path_path_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringPathRequest) ProtoMessage() {}

func (x *StringPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_path_path_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringPathRequest.ProtoReflect.Descriptor instead.
func (*StringPathRequest) Descriptor() ([]byte, []int) {
	return file_path_path_proto_rawDescGZIP(), []int{7}
}

func (x *StringPathRequest) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *StringPathRequest) GetOptString() string {
	if x != nil && x.OptString != nil {
		return *x.OptString
	}
	return ""
}

func (x *StringPathRequest) GetWrapString() *wrapperspb.StringValue {
	if x != nil {
		return x.WrapString
	}
	return nil
}

type EnumPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    EnumPathRequest_Status  `protobuf:"varint,68,opt,name=status,proto3,enum=leo.gorilla.example.path.v1.EnumPathRequest_Status" json:"status,omitempty"`
	OptStatus *EnumPathRequest_Status `protobuf:"varint,69,opt,name=opt_status,json=optStatus,proto3,enum=leo.gorilla.example.path.v1.EnumPathRequest_Status,oneof" json:"opt_status,omitempty"`
}

func (x *EnumPathRequest) Reset() {
	*x = EnumPathRequest{}
	mi := &file_path_path_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnumPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumPathRequest) ProtoMessage() {}

func (x *EnumPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_path_path_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumPathRequest.ProtoReflect.Descriptor instead.
func (*EnumPathRequest) Descriptor() ([]byte, []int) {
	return file_path_path_proto_rawDescGZIP(), []int{8}
}

func (x *EnumPathRequest) GetStatus() EnumPathRequest_Status {
	if x != nil {
		return x.Status
	}
	return EnumPathRequest_UNKNOWN
}

func (x *EnumPathRequest) GetOptStatus() EnumPathRequest_Status {
	if x != nil && x.OptStatus != nil {
		return *x.OptStatus
	}
	return EnumPathRequest_UNKNOWN
}

var File_path_path_proto protoreflect.FileDescriptor

var file_path_path_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1b, 0x6c, 0x65, 0x6f, 0x2e, 0x67, 0x6f, 0x72, 0x69, 0x6c, 0x6c, 0x61, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x42, 0x6f,
	0x6f, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f,
	0x6c, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x09, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x77, 0x72, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f,
	0x70, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x22, 0xb4, 0x02, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x11, 0x48, 0x01, 0x52, 0x09,
	0x6f, 0x70, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x6f, 0x70, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0f, 0x48, 0x02, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x77, 0x72, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x22, 0xb4,
	0x02, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x10, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x20, 0x0a,
	0x09, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x12, 0x48, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0x21, 0x20, 0x01, 0x28, 0x10, 0x48, 0x02, 0x52, 0x0b, 0x6f, 0x70, 0x74,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0a, 0x77,
	0x72, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x77, 0x72,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x70, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x22, 0xed, 0x01, 0x0a, 0x11, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x22, 0x0a,
	0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x07, 0x48, 0x01, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x77, 0x72, 0x61, 0x70, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x72, 0x61, 0x70,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x22, 0xed, 0x01, 0x0a, 0x11, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x22, 0x0a,
	0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x06, 0x48, 0x01, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x77, 0x72, 0x61, 0x70, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x72, 0x61, 0x70,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x12, 0x20, 0x0a, 0x09, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x77, 0x72, 0x61, 0x70, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x22, 0x9d, 0x01, 0x0a,
	0x11, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x70,
	0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x09, 0x6f, 0x70, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x0b, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x22, 0x9d, 0x01, 0x0a,
	0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x70,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x09, 0x6f, 0x70, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x0b, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x87, 0x02, 0x0a,
	0x0f, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x67, 0x6f, 0x72, 0x69, 0x6c, 0x6c, 0x61, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a,
	0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x67, 0x6f, 0x72, 0x69, 0x6c, 0x6c, 0x61, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x22, 0x3f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x87, 0x01, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6c, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x7b, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x2c, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x67, 0x6f, 0x72, 0x69, 0x6c, 0x6c, 0x61, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x62, 0x6f, 0x6f, 0x6c, 0x7d, 0x2f, 0x7b, 0x6f, 0x70, 0x74, 0x5f, 0x62,
	0x6f, 0x6f, 0x6c, 0x7d, 0x2f, 0x7b, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x7d,
	0x32, 0xbe, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x74, 0x68, 0x12, 0xb0,
	0x01, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2d, 0x2e, 0x6c,
	0x65, 0x6f, 0x2e, 0x67, 0x6f, 0x72, 0x69, 0x6c, 0x6c, 0x61, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x12, 0x54, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x7d, 0x2f, 0x7b, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x7d, 0x2f, 0x7b, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x7d, 0x2f, 0x7b, 0x6f, 0x70,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x7d, 0x2f, 0x7b, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x7d, 0x2f, 0x7b, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x7d, 0x2f, 0x7b, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x7d, 0x32, 0xbe, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x61, 0x74, 0x68, 0x12,
	0xb0, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2d, 0x2e,
	0x6c, 0x65, 0x6f, 0x2e, 0x67, 0x6f, 0x72, 0x69, 0x6c, 0x6c, 0x61, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x12, 0x54, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x7d, 0x2f, 0x7b, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x7d, 0x2f, 0x7b, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x7d, 0x2f, 0x7b, 0x6f,
	0x70, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x7d, 0x2f, 0x7b, 0x6f, 0x70, 0x74, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x7d, 0x2f, 0x7b, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x7d, 0x2f, 0x7b, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x7d, 0x32, 0xac, 0x01, 0x0a, 0x0a, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x9d, 0x01, 0x0a, 0x0a, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x67, 0x6f, 0x72, 0x69, 0x6c, 0x6c, 0x61, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41,
	0x12, 0x3f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x7d, 0x2f, 0x7b,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x7d, 0x2f, 0x7b, 0x6f, 0x70, 0x74, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x7d, 0x2f, 0x7b, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x7d, 0x2f, 0x7b, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x7d, 0x32, 0xac, 0x01, 0x0a, 0x0a, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x9d, 0x01, 0x0a, 0x0a, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x2e, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x67, 0x6f, 0x72, 0x69, 0x6c, 0x6c, 0x61, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12,
	0x3f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x7d, 0x2f, 0x7b, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x7d, 0x2f, 0x7b, 0x6f, 0x70, 0x74, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x7d, 0x2f, 0x7b, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x7d, 0x2f, 0x7b, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x7d,
	0x32, 0x8e, 0x01, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x80,
	0x01, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2d, 0x2e, 0x6c,
	0x65, 0x6f, 0x2e, 0x67, 0x6f, 0x72, 0x69, 0x6c, 0x6c, 0x61, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x7d, 0x2f, 0x7b, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x7d, 0x2f, 0x7b, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x7d, 0x32, 0x94, 0x01, 0x0a, 0x0a, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x85, 0x01, 0x0a, 0x0a, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x2e, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x67, 0x6f, 0x72, 0x69, 0x6c, 0x6c, 0x61, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12,
	0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x7d, 0x2f, 0x7b, 0x6f,
	0x70, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x7d, 0x2f, 0x7b, 0x77, 0x72, 0x61, 0x70,
	0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x7d, 0x32, 0x94, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x85, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x67, 0x6f, 0x72,
	0x69, 0x6c, 0x6c, 0x61, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x61, 0x74,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x7d, 0x2f, 0x7b, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x7d, 0x2f, 0x7b, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x7d, 0x32,
	0x7f, 0x0a, 0x08, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x12, 0x73, 0x0a, 0x08, 0x45,
	0x6e, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x67, 0x6f,
	0x72, 0x69, 0x6c, 0x6c, 0x61, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x61,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x7d, 0x2f, 0x7b, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x7d,
	0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x6f, 0x2d, 0x6c, 0x65, 0x6f, 0x2f, 0x67, 0x6f, 0x72, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x61,
	0x74, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_path_path_proto_rawDescOnce sync.Once
	file_path_path_proto_rawDescData = file_path_path_proto_rawDesc
)

func file_path_path_proto_rawDescGZIP() []byte {
	file_path_path_proto_rawDescOnce.Do(func() {
		file_path_path_proto_rawDescData = protoimpl.X.CompressGZIP(file_path_path_proto_rawDescData)
	})
	return file_path_path_proto_rawDescData
}

var file_path_path_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_path_path_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_path_path_proto_goTypes = []any{
	(EnumPathRequest_Status)(0),    // 0: leo.gorilla.example.path.v1.EnumPathRequest.Status
	(*BoolPathRequest)(nil),        // 1: leo.gorilla.example.path.v1.BoolPathRequest
	(*Int32PathRequest)(nil),       // 2: leo.gorilla.example.path.v1.Int32PathRequest
	(*Int64PathRequest)(nil),       // 3: leo.gorilla.example.path.v1.Int64PathRequest
	(*Uint32PathRequest)(nil),      // 4: leo.gorilla.example.path.v1.Uint32PathRequest
	(*Uint64PathRequest)(nil),      // 5: leo.gorilla.example.path.v1.Uint64PathRequest
	(*FloatPathRequest)(nil),       // 6: leo.gorilla.example.path.v1.FloatPathRequest
	(*DoublePathRequest)(nil),      // 7: leo.gorilla.example.path.v1.DoublePathRequest
	(*StringPathRequest)(nil),      // 8: leo.gorilla.example.path.v1.StringPathRequest
	(*EnumPathRequest)(nil),        // 9: leo.gorilla.example.path.v1.EnumPathRequest
	(*wrapperspb.BoolValue)(nil),   // 10: google.protobuf.BoolValue
	(*wrapperspb.Int32Value)(nil),  // 11: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),  // 12: google.protobuf.Int64Value
	(*wrapperspb.UInt32Value)(nil), // 13: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil), // 14: google.protobuf.UInt64Value
	(*wrapperspb.FloatValue)(nil),  // 15: google.protobuf.FloatValue
	(*wrapperspb.DoubleValue)(nil), // 16: google.protobuf.DoubleValue
	(*wrapperspb.StringValue)(nil), // 17: google.protobuf.StringValue
	(*emptypb.Empty)(nil),          // 18: google.protobuf.Empty
}
var file_path_path_proto_depIdxs = []int32{
	10, // 0: leo.gorilla.example.path.v1.BoolPathRequest.wrap_bool:type_name -> google.protobuf.BoolValue
	11, // 1: leo.gorilla.example.path.v1.Int32PathRequest.wrap_int32:type_name -> google.protobuf.Int32Value
	12, // 2: leo.gorilla.example.path.v1.Int64PathRequest.wrap_int64:type_name -> google.protobuf.Int64Value
	13, // 3: leo.gorilla.example.path.v1.Uint32PathRequest.wrap_uint32:type_name -> google.protobuf.UInt32Value
	14, // 4: leo.gorilla.example.path.v1.Uint64PathRequest.wrap_uint64:type_name -> google.protobuf.UInt64Value
	15, // 5: leo.gorilla.example.path.v1.FloatPathRequest.wrap_float:type_name -> google.protobuf.FloatValue
	16, // 6: leo.gorilla.example.path.v1.DoublePathRequest.wrap_double:type_name -> google.protobuf.DoubleValue
	17, // 7: leo.gorilla.example.path.v1.StringPathRequest.wrap_string:type_name -> google.protobuf.StringValue
	0,  // 8: leo.gorilla.example.path.v1.EnumPathRequest.status:type_name -> leo.gorilla.example.path.v1.EnumPathRequest.Status
	0,  // 9: leo.gorilla.example.path.v1.EnumPathRequest.opt_status:type_name -> leo.gorilla.example.path.v1.EnumPathRequest.Status
	1,  // 10: leo.gorilla.example.path.v1.BoolPath.BoolPath:input_type -> leo.gorilla.example.path.v1.BoolPathRequest
	2,  // 11: leo.gorilla.example.path.v1.Int32Path.Int32Path:input_type -> leo.gorilla.example.path.v1.Int32PathRequest
	3,  // 12: leo.gorilla.example.path.v1.Int64Path.Int64Path:input_type -> leo.gorilla.example.path.v1.Int64PathRequest
	4,  // 13: leo.gorilla.example.path.v1.Uint32Path.Uint32Path:input_type -> leo.gorilla.example.path.v1.Uint32PathRequest
	5,  // 14: leo.gorilla.example.path.v1.Uint64Path.Uint64Path:input_type -> leo.gorilla.example.path.v1.Uint64PathRequest
	6,  // 15: leo.gorilla.example.path.v1.FloatPath.FloatPath:input_type -> leo.gorilla.example.path.v1.FloatPathRequest
	7,  // 16: leo.gorilla.example.path.v1.DoublePath.DoublePath:input_type -> leo.gorilla.example.path.v1.DoublePathRequest
	8,  // 17: leo.gorilla.example.path.v1.StringPath.StringPath:input_type -> leo.gorilla.example.path.v1.StringPathRequest
	9,  // 18: leo.gorilla.example.path.v1.EnumPath.EnumPath:input_type -> leo.gorilla.example.path.v1.EnumPathRequest
	18, // 19: leo.gorilla.example.path.v1.BoolPath.BoolPath:output_type -> google.protobuf.Empty
	18, // 20: leo.gorilla.example.path.v1.Int32Path.Int32Path:output_type -> google.protobuf.Empty
	18, // 21: leo.gorilla.example.path.v1.Int64Path.Int64Path:output_type -> google.protobuf.Empty
	18, // 22: leo.gorilla.example.path.v1.Uint32Path.Uint32Path:output_type -> google.protobuf.Empty
	18, // 23: leo.gorilla.example.path.v1.Uint64Path.Uint64Path:output_type -> google.protobuf.Empty
	18, // 24: leo.gorilla.example.path.v1.FloatPath.FloatPath:output_type -> google.protobuf.Empty
	18, // 25: leo.gorilla.example.path.v1.DoublePath.DoublePath:output_type -> google.protobuf.Empty
	18, // 26: leo.gorilla.example.path.v1.StringPath.StringPath:output_type -> google.protobuf.Empty
	18, // 27: leo.gorilla.example.path.v1.EnumPath.EnumPath:output_type -> google.protobuf.Empty
	19, // [19:28] is the sub-list for method output_type
	10, // [10:19] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_path_path_proto_init() }
func file_path_path_proto_init() {
	if File_path_path_proto != nil {
		return
	}
	file_path_path_proto_msgTypes[0].OneofWrappers = []any{}
	file_path_path_proto_msgTypes[1].OneofWrappers = []any{}
	file_path_path_proto_msgTypes[2].OneofWrappers = []any{}
	file_path_path_proto_msgTypes[3].OneofWrappers = []any{}
	file_path_path_proto_msgTypes[4].OneofWrappers = []any{}
	file_path_path_proto_msgTypes[5].OneofWrappers = []any{}
	file_path_path_proto_msgTypes[6].OneofWrappers = []any{}
	file_path_path_proto_msgTypes[7].OneofWrappers = []any{}
	file_path_path_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_path_path_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   9,
		},
		GoTypes:           file_path_path_proto_goTypes,
		DependencyIndexes: file_path_path_proto_depIdxs,
		EnumInfos:         file_path_path_proto_enumTypes,
		MessageInfos:      file_path_path_proto_msgTypes,
	}.Build()
	File_path_path_proto = out.File
	file_path_path_proto_rawDesc = nil
	file_path_path_proto_goTypes = nil
	file_path_path_proto_depIdxs = nil
}
