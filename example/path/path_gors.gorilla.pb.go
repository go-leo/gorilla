// Code generated by protoc-gen-gors-gorilla. DO NOT EDIT.

package path

import (
	context "context"
	fmt "fmt"
	v2 "github.com/go-leo/gors/v2"
	urlx "github.com/go-leo/gox/netx/urlx"
	mux "github.com/gorilla/mux"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	http "net/http"
)

type BoolPathGorillaService interface {
	BoolPath(ctx context.Context, request *BoolPathRequest) (*emptypb.Empty, error)
}

func AppendBoolPathGorillaRoute(router *mux.Router, service BoolPathGorillaService, opts ...v2.Option) *mux.Router {
	options := v2.NewOptions(opts...)
	handler := boolPathGorillaHandler{
		service: service,
		decoder: boolPathGorillaRequestDecoder{
			unmarshalOptions: options.UnmarshalOptions(),
		},
		encoder: boolPathGorillaResponseEncoder{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: v2.DefaultErrorEncoder,
	}
	router.NewRoute().
		Name("/leo.gors.example.path.v1.BoolPath/BoolPath").
		Methods("GET").
		Path("/v1/{bool}/{opt_bool}/{wrap_bool}").
		Handler(handler.BoolPath())
	return router
}

type boolPathGorillaHandler struct {
	service      BoolPathGorillaService
	decoder      boolPathGorillaRequestDecoder
	encoder      boolPathGorillaResponseEncoder
	errorEncoder v2.ErrorEncoder
}

func (h boolPathGorillaHandler) BoolPath() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.BoolPath(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.BoolPath(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.BoolPath(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type boolPathGorillaRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder boolPathGorillaRequestDecoder) BoolPath(ctx context.Context, r *http.Request) (*BoolPathRequest, error) {
	req := &BoolPathRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Bool, varErr = v2.FormDecoder[bool](varErr, vars, "bool", urlx.GetBool)
	req.OptBool, varErr = v2.FormDecoder[*bool](varErr, vars, "opt_bool", urlx.GetBoolPtr)
	req.WrapBool, varErr = v2.FormDecoder[*wrapperspb.BoolValue](varErr, vars, "wrap_bool", urlx.GetBoolValue)
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}

type boolPathGorillaResponseEncoder struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer v2.ResponseTransformer
}

func (encoder boolPathGorillaResponseEncoder) BoolPath(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}

type Int32PathGorillaService interface {
	Int32Path(ctx context.Context, request *Int32PathRequest) (*emptypb.Empty, error)
}

func AppendInt32PathGorillaRoute(router *mux.Router, service Int32PathGorillaService, opts ...v2.Option) *mux.Router {
	options := v2.NewOptions(opts...)
	handler := int32PathGorillaHandler{
		service: service,
		decoder: int32PathGorillaRequestDecoder{
			unmarshalOptions: options.UnmarshalOptions(),
		},
		encoder: int32PathGorillaResponseEncoder{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: v2.DefaultErrorEncoder,
	}
	router.NewRoute().
		Name("/leo.gors.example.path.v1.Int32Path/Int32Path").
		Methods("GET").
		Path("/v1/{int32}/{sint32}/{sfixed32}/{opt_int32}/{opt_sint32}/{opt_sfixed32}/{wrap_int32}").
		Handler(handler.Int32Path())
	return router
}

type int32PathGorillaHandler struct {
	service      Int32PathGorillaService
	decoder      int32PathGorillaRequestDecoder
	encoder      int32PathGorillaResponseEncoder
	errorEncoder v2.ErrorEncoder
}

func (h int32PathGorillaHandler) Int32Path() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.Int32Path(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.Int32Path(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.Int32Path(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type int32PathGorillaRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder int32PathGorillaRequestDecoder) Int32Path(ctx context.Context, r *http.Request) (*Int32PathRequest, error) {
	req := &Int32PathRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Int32, varErr = v2.FormDecoder[int32](varErr, vars, "int32", urlx.GetInt)
	req.Sint32, varErr = v2.FormDecoder[int32](varErr, vars, "sint32", urlx.GetInt)
	req.Sfixed32, varErr = v2.FormDecoder[int32](varErr, vars, "sfixed32", urlx.GetInt)
	req.OptInt32, varErr = v2.FormDecoder[*int32](varErr, vars, "opt_int32", urlx.GetIntPtr)
	req.OptSint32, varErr = v2.FormDecoder[*int32](varErr, vars, "opt_sint32", urlx.GetIntPtr)
	req.OptSfixed32, varErr = v2.FormDecoder[*int32](varErr, vars, "opt_sfixed32", urlx.GetIntPtr)
	req.WrapInt32, varErr = v2.FormDecoder[*wrapperspb.Int32Value](varErr, vars, "wrap_int32", urlx.GetInt32Value)
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}

type int32PathGorillaResponseEncoder struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer v2.ResponseTransformer
}

func (encoder int32PathGorillaResponseEncoder) Int32Path(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}

type Int64PathGorillaService interface {
	Int64Path(ctx context.Context, request *Int64PathRequest) (*emptypb.Empty, error)
}

func AppendInt64PathGorillaRoute(router *mux.Router, service Int64PathGorillaService, opts ...v2.Option) *mux.Router {
	options := v2.NewOptions(opts...)
	handler := int64PathGorillaHandler{
		service: service,
		decoder: int64PathGorillaRequestDecoder{
			unmarshalOptions: options.UnmarshalOptions(),
		},
		encoder: int64PathGorillaResponseEncoder{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: v2.DefaultErrorEncoder,
	}
	router.NewRoute().
		Name("/leo.gors.example.path.v1.Int64Path/Int64Path").
		Methods("GET").
		Path("/v1/{int64}/{sint64}/{sfixed64}/{opt_int64}/{opt_sint64}/{opt_sfixed64}/{wrap_int64}").
		Handler(handler.Int64Path())
	return router
}

type int64PathGorillaHandler struct {
	service      Int64PathGorillaService
	decoder      int64PathGorillaRequestDecoder
	encoder      int64PathGorillaResponseEncoder
	errorEncoder v2.ErrorEncoder
}

func (h int64PathGorillaHandler) Int64Path() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.Int64Path(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.Int64Path(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.Int64Path(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type int64PathGorillaRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder int64PathGorillaRequestDecoder) Int64Path(ctx context.Context, r *http.Request) (*Int64PathRequest, error) {
	req := &Int64PathRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Int64, varErr = v2.FormDecoder[int64](varErr, vars, "int64", urlx.GetInt)
	req.Sint64, varErr = v2.FormDecoder[int64](varErr, vars, "sint64", urlx.GetInt)
	req.Sfixed64, varErr = v2.FormDecoder[int64](varErr, vars, "sfixed64", urlx.GetInt)
	req.OptInt64, varErr = v2.FormDecoder[*int64](varErr, vars, "opt_int64", urlx.GetIntPtr)
	req.OptSint64, varErr = v2.FormDecoder[*int64](varErr, vars, "opt_sint64", urlx.GetIntPtr)
	req.OptSfixed64, varErr = v2.FormDecoder[*int64](varErr, vars, "opt_sfixed64", urlx.GetIntPtr)
	req.WrapInt64, varErr = v2.FormDecoder[*wrapperspb.Int64Value](varErr, vars, "wrap_int64", urlx.GetInt64Value)
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}

type int64PathGorillaResponseEncoder struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer v2.ResponseTransformer
}

func (encoder int64PathGorillaResponseEncoder) Int64Path(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}

type Uint32PathGorillaService interface {
	Uint32Path(ctx context.Context, request *Uint32PathRequest) (*emptypb.Empty, error)
}

func AppendUint32PathGorillaRoute(router *mux.Router, service Uint32PathGorillaService, opts ...v2.Option) *mux.Router {
	options := v2.NewOptions(opts...)
	handler := uint32PathGorillaHandler{
		service: service,
		decoder: uint32PathGorillaRequestDecoder{
			unmarshalOptions: options.UnmarshalOptions(),
		},
		encoder: uint32PathGorillaResponseEncoder{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: v2.DefaultErrorEncoder,
	}
	router.NewRoute().
		Name("/leo.gors.example.path.v1.Uint32Path/Uint32Path").
		Methods("GET").
		Path("/v1/{uint32}/{fixed32}/{opt_uint32}/{opt_fixed32}/{wrap_uint32}").
		Handler(handler.Uint32Path())
	return router
}

type uint32PathGorillaHandler struct {
	service      Uint32PathGorillaService
	decoder      uint32PathGorillaRequestDecoder
	encoder      uint32PathGorillaResponseEncoder
	errorEncoder v2.ErrorEncoder
}

func (h uint32PathGorillaHandler) Uint32Path() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.Uint32Path(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.Uint32Path(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.Uint32Path(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type uint32PathGorillaRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder uint32PathGorillaRequestDecoder) Uint32Path(ctx context.Context, r *http.Request) (*Uint32PathRequest, error) {
	req := &Uint32PathRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Uint32, varErr = v2.FormDecoder[uint32](varErr, vars, "uint32", urlx.GetUint)
	req.Fixed32, varErr = v2.FormDecoder[uint32](varErr, vars, "fixed32", urlx.GetUint)
	req.OptUint32, varErr = v2.FormDecoder[*uint32](varErr, vars, "opt_uint32", urlx.GetUintPtr)
	req.OptFixed32, varErr = v2.FormDecoder[*uint32](varErr, vars, "opt_fixed32", urlx.GetUintPtr)
	req.WrapUint32, varErr = v2.FormDecoder[*wrapperspb.UInt32Value](varErr, vars, "wrap_uint32", urlx.GetUint32Value)
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}

type uint32PathGorillaResponseEncoder struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer v2.ResponseTransformer
}

func (encoder uint32PathGorillaResponseEncoder) Uint32Path(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}

type Uint64PathGorillaService interface {
	Uint64Path(ctx context.Context, request *Uint64PathRequest) (*emptypb.Empty, error)
}

func AppendUint64PathGorillaRoute(router *mux.Router, service Uint64PathGorillaService, opts ...v2.Option) *mux.Router {
	options := v2.NewOptions(opts...)
	handler := uint64PathGorillaHandler{
		service: service,
		decoder: uint64PathGorillaRequestDecoder{
			unmarshalOptions: options.UnmarshalOptions(),
		},
		encoder: uint64PathGorillaResponseEncoder{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: v2.DefaultErrorEncoder,
	}
	router.NewRoute().
		Name("/leo.gors.example.path.v1.Uint64Path/Uint64Path").
		Methods("GET").
		Path("/v1/{uint64}/{fixed64}/{opt_uint64}/{opt_fixed64}/{wrap_uint64}").
		Handler(handler.Uint64Path())
	return router
}

type uint64PathGorillaHandler struct {
	service      Uint64PathGorillaService
	decoder      uint64PathGorillaRequestDecoder
	encoder      uint64PathGorillaResponseEncoder
	errorEncoder v2.ErrorEncoder
}

func (h uint64PathGorillaHandler) Uint64Path() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.Uint64Path(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.Uint64Path(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.Uint64Path(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type uint64PathGorillaRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder uint64PathGorillaRequestDecoder) Uint64Path(ctx context.Context, r *http.Request) (*Uint64PathRequest, error) {
	req := &Uint64PathRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Uint64, varErr = v2.FormDecoder[uint64](varErr, vars, "uint64", urlx.GetUint)
	req.Fixed64, varErr = v2.FormDecoder[uint64](varErr, vars, "fixed64", urlx.GetUint)
	req.OptUint64, varErr = v2.FormDecoder[*uint64](varErr, vars, "opt_uint64", urlx.GetUintPtr)
	req.OptFixed64, varErr = v2.FormDecoder[*uint64](varErr, vars, "opt_fixed64", urlx.GetUintPtr)
	req.WrapUint64, varErr = v2.FormDecoder[*wrapperspb.UInt64Value](varErr, vars, "wrap_uint64", urlx.GetUint64Value)
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}

type uint64PathGorillaResponseEncoder struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer v2.ResponseTransformer
}

func (encoder uint64PathGorillaResponseEncoder) Uint64Path(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}

type FloatPathGorillaService interface {
	FloatPath(ctx context.Context, request *FloatPathRequest) (*emptypb.Empty, error)
}

func AppendFloatPathGorillaRoute(router *mux.Router, service FloatPathGorillaService, opts ...v2.Option) *mux.Router {
	options := v2.NewOptions(opts...)
	handler := floatPathGorillaHandler{
		service: service,
		decoder: floatPathGorillaRequestDecoder{
			unmarshalOptions: options.UnmarshalOptions(),
		},
		encoder: floatPathGorillaResponseEncoder{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: v2.DefaultErrorEncoder,
	}
	router.NewRoute().
		Name("/leo.gors.example.path.v1.FloatPath/FloatPath").
		Methods("GET").
		Path("/v1/{float}/{opt_float}/{wrap_float}").
		Handler(handler.FloatPath())
	return router
}

type floatPathGorillaHandler struct {
	service      FloatPathGorillaService
	decoder      floatPathGorillaRequestDecoder
	encoder      floatPathGorillaResponseEncoder
	errorEncoder v2.ErrorEncoder
}

func (h floatPathGorillaHandler) FloatPath() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.FloatPath(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.FloatPath(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.FloatPath(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type floatPathGorillaRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder floatPathGorillaRequestDecoder) FloatPath(ctx context.Context, r *http.Request) (*FloatPathRequest, error) {
	req := &FloatPathRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Float, varErr = v2.FormDecoder[float32](varErr, vars, "float", urlx.GetFloat)
	req.OptFloat, varErr = v2.FormDecoder[*float32](varErr, vars, "opt_float", urlx.GetFloatPtr)
	req.WrapFloat, varErr = v2.FormDecoder[*wrapperspb.FloatValue](varErr, vars, "wrap_float", urlx.GetFloat32Value)
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}

type floatPathGorillaResponseEncoder struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer v2.ResponseTransformer
}

func (encoder floatPathGorillaResponseEncoder) FloatPath(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}

type DoublePathGorillaService interface {
	DoublePath(ctx context.Context, request *DoublePathRequest) (*emptypb.Empty, error)
}

func AppendDoublePathGorillaRoute(router *mux.Router, service DoublePathGorillaService, opts ...v2.Option) *mux.Router {
	options := v2.NewOptions(opts...)
	handler := doublePathGorillaHandler{
		service: service,
		decoder: doublePathGorillaRequestDecoder{
			unmarshalOptions: options.UnmarshalOptions(),
		},
		encoder: doublePathGorillaResponseEncoder{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: v2.DefaultErrorEncoder,
	}
	router.NewRoute().
		Name("/leo.gors.example.path.v1.DoublePath/DoublePath").
		Methods("GET").
		Path("/v1/{double}/{opt_double}/{wrap_double}").
		Handler(handler.DoublePath())
	return router
}

type doublePathGorillaHandler struct {
	service      DoublePathGorillaService
	decoder      doublePathGorillaRequestDecoder
	encoder      doublePathGorillaResponseEncoder
	errorEncoder v2.ErrorEncoder
}

func (h doublePathGorillaHandler) DoublePath() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.DoublePath(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.DoublePath(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.DoublePath(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type doublePathGorillaRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder doublePathGorillaRequestDecoder) DoublePath(ctx context.Context, r *http.Request) (*DoublePathRequest, error) {
	req := &DoublePathRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Double, varErr = v2.FormDecoder[float64](varErr, vars, "double", urlx.GetFloat)
	req.OptDouble, varErr = v2.FormDecoder[*float64](varErr, vars, "opt_double", urlx.GetFloatPtr)
	req.WrapDouble, varErr = v2.FormDecoder[*wrapperspb.DoubleValue](varErr, vars, "wrap_double", urlx.GetFloat64Value)
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}

type doublePathGorillaResponseEncoder struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer v2.ResponseTransformer
}

func (encoder doublePathGorillaResponseEncoder) DoublePath(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}

type StringPathGorillaService interface {
	StringPath(ctx context.Context, request *StringPathRequest) (*emptypb.Empty, error)
}

func AppendStringPathGorillaRoute(router *mux.Router, service StringPathGorillaService, opts ...v2.Option) *mux.Router {
	options := v2.NewOptions(opts...)
	handler := stringPathGorillaHandler{
		service: service,
		decoder: stringPathGorillaRequestDecoder{
			unmarshalOptions: options.UnmarshalOptions(),
		},
		encoder: stringPathGorillaResponseEncoder{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: v2.DefaultErrorEncoder,
	}
	router.NewRoute().
		Name("/leo.gors.example.path.v1.StringPath/StringPath").
		Methods("GET").
		Path("/v1/{string}/{opt_string}/{wrap_string}").
		Handler(handler.StringPath())
	return router
}

type stringPathGorillaHandler struct {
	service      StringPathGorillaService
	decoder      stringPathGorillaRequestDecoder
	encoder      stringPathGorillaResponseEncoder
	errorEncoder v2.ErrorEncoder
}

func (h stringPathGorillaHandler) StringPath() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.StringPath(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.StringPath(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.StringPath(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type stringPathGorillaRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder stringPathGorillaRequestDecoder) StringPath(ctx context.Context, r *http.Request) (*StringPathRequest, error) {
	req := &StringPathRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.String_ = vars.Get("string")
	req.OptString = proto.String(vars.Get("opt_string"))
	req.WrapString = wrapperspb.String(vars.Get("wrap_string"))
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}

type stringPathGorillaResponseEncoder struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer v2.ResponseTransformer
}

func (encoder stringPathGorillaResponseEncoder) StringPath(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}

type EnumPathGorillaService interface {
	EnumPath(ctx context.Context, request *EnumPathRequest) (*emptypb.Empty, error)
}

func AppendEnumPathGorillaRoute(router *mux.Router, service EnumPathGorillaService, opts ...v2.Option) *mux.Router {
	options := v2.NewOptions(opts...)
	handler := enumPathGorillaHandler{
		service: service,
		decoder: enumPathGorillaRequestDecoder{
			unmarshalOptions: options.UnmarshalOptions(),
		},
		encoder: enumPathGorillaResponseEncoder{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: v2.DefaultErrorEncoder,
	}
	router.NewRoute().
		Name("/leo.gors.example.path.v1.EnumPath/EnumPath").
		Methods("GET").
		Path("/v1/{status}/{opt_status}").
		Handler(handler.EnumPath())
	return router
}

type enumPathGorillaHandler struct {
	service      EnumPathGorillaService
	decoder      enumPathGorillaRequestDecoder
	encoder      enumPathGorillaResponseEncoder
	errorEncoder v2.ErrorEncoder
}

func (h enumPathGorillaHandler) EnumPath() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.EnumPath(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.EnumPath(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.EnumPath(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type enumPathGorillaRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder enumPathGorillaRequestDecoder) EnumPath(ctx context.Context, r *http.Request) (*EnumPathRequest, error) {
	req := &EnumPathRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Status, varErr = v2.FormDecoder[EnumPathRequest_Status](varErr, vars, "status", urlx.GetInt[EnumPathRequest_Status])
	req.OptStatus, varErr = v2.FormDecoder[*EnumPathRequest_Status](varErr, vars, "opt_status", urlx.GetIntPtr[EnumPathRequest_Status])
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}

type enumPathGorillaResponseEncoder struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer v2.ResponseTransformer
}

func (encoder enumPathGorillaResponseEncoder) EnumPath(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}

type NamedPathGorillaService interface {
	NamedPathString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error)
	NamedPathOptString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error)
	NamedPathWrapString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error)
	EmbedNamedPathString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error)
	EmbedNamedPathOptString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error)
	EmbedNamedPathWrapString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error)
}

func AppendNamedPathGorillaRoute(router *mux.Router, service NamedPathGorillaService, opts ...v2.Option) *mux.Router {
	options := v2.NewOptions(opts...)
	handler := namedPathGorillaHandler{
		service: service,
		decoder: namedPathGorillaRequestDecoder{
			unmarshalOptions: options.UnmarshalOptions(),
		},
		encoder: namedPathGorillaResponseEncoder{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: v2.DefaultErrorEncoder,
	}
	router.NewRoute().
		Name("/leo.gors.example.path.v1.NamedPath/NamedPathString").
		Methods("GET").
		Path("/v1/string/classes/{class}/shelves/{shelf}/books/{book}/families/{family}").
		Handler(handler.NamedPathString())
	router.NewRoute().
		Name("/leo.gors.example.path.v1.NamedPath/NamedPathOptString").
		Methods("GET").
		Path("/v1/opt_string/classes/{class}/shelves/{shelf}/books/{book}/families/{family}").
		Handler(handler.NamedPathOptString())
	router.NewRoute().
		Name("/leo.gors.example.path.v1.NamedPath/NamedPathWrapString").
		Methods("GET").
		Path("/v1/wrap_string/classes/{class}/shelves/{shelf}/books/{book}/families/{family}").
		Handler(handler.NamedPathWrapString())
	router.NewRoute().
		Name("/leo.gors.example.path.v1.NamedPath/EmbedNamedPathString").
		Methods("GET").
		Path("/v1/embed/string/classes/{class}/shelves/{shelf}/books/{book}/families/{family}").
		Handler(handler.EmbedNamedPathString())
	router.NewRoute().
		Name("/leo.gors.example.path.v1.NamedPath/EmbedNamedPathOptString").
		Methods("GET").
		Path("/v1/embed/opt_string/classes/{class}/shelves/{shelf}/books/{book}/families/{family}").
		Handler(handler.EmbedNamedPathOptString())
	router.NewRoute().
		Name("/leo.gors.example.path.v1.NamedPath/EmbedNamedPathWrapString").
		Methods("GET").
		Path("/v1/embed/wrap_string/classes/{class}/shelves/{shelf}/books/{book}/families/{family}").
		Handler(handler.EmbedNamedPathWrapString())
	return router
}

type namedPathGorillaHandler struct {
	service      NamedPathGorillaService
	decoder      namedPathGorillaRequestDecoder
	encoder      namedPathGorillaResponseEncoder
	errorEncoder v2.ErrorEncoder
}

func (h namedPathGorillaHandler) NamedPathString() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.NamedPathString(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.NamedPathString(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.NamedPathString(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h namedPathGorillaHandler) NamedPathOptString() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.NamedPathOptString(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.NamedPathOptString(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.NamedPathOptString(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h namedPathGorillaHandler) NamedPathWrapString() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.NamedPathWrapString(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.NamedPathWrapString(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.NamedPathWrapString(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h namedPathGorillaHandler) EmbedNamedPathString() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.EmbedNamedPathString(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.EmbedNamedPathString(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.EmbedNamedPathString(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h namedPathGorillaHandler) EmbedNamedPathOptString() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.EmbedNamedPathOptString(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.EmbedNamedPathOptString(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.EmbedNamedPathOptString(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h namedPathGorillaHandler) EmbedNamedPathWrapString() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.EmbedNamedPathWrapString(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.EmbedNamedPathWrapString(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.EmbedNamedPathWrapString(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type namedPathGorillaRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder namedPathGorillaRequestDecoder) NamedPathString(ctx context.Context, r *http.Request) (*NamedPathRequest, error) {
	req := &NamedPathRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	req.String_ = fmt.Sprintf("classes/%s/shelves/%s/books/%s/families/%s", vars.Get("class"), vars.Get("shelf"), vars.Get("book"), vars.Get("family"))
	queries := r.URL.Query()
	var queryErr error
	req.OptString = proto.String(queries.Get("opt_string"))
	req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
	if queryErr != nil {
		return nil, queryErr
	}
	return req, nil
}
func (decoder namedPathGorillaRequestDecoder) NamedPathOptString(ctx context.Context, r *http.Request) (*NamedPathRequest, error) {
	req := &NamedPathRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	req.OptString = proto.String(fmt.Sprintf("classes/%s/shelves/%s/books/%s/families/%s", vars.Get("class"), vars.Get("shelf"), vars.Get("book"), vars.Get("family")))
	queries := r.URL.Query()
	var queryErr error
	req.String_ = queries.Get("string")
	req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
	if queryErr != nil {
		return nil, queryErr
	}
	return req, nil
}
func (decoder namedPathGorillaRequestDecoder) NamedPathWrapString(ctx context.Context, r *http.Request) (*NamedPathRequest, error) {
	req := &NamedPathRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	req.WrapString = wrapperspb.String(fmt.Sprintf("classes/%s/shelves/%s/books/%s/families/%s", vars.Get("class"), vars.Get("shelf"), vars.Get("book"), vars.Get("family")))
	queries := r.URL.Query()
	var queryErr error
	req.String_ = queries.Get("string")
	req.OptString = proto.String(queries.Get("opt_string"))
	if queryErr != nil {
		return nil, queryErr
	}
	return req, nil
}
func (decoder namedPathGorillaRequestDecoder) EmbedNamedPathString(ctx context.Context, r *http.Request) (*EmbedNamedPathRequest, error) {
	req := &EmbedNamedPathRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	if req.Embed == nil {
		req.Embed = &NamedPathRequest{}
	}
	req.Embed.String_ = fmt.Sprintf("classes/%s/shelves/%s/books/%s/families/%s", vars.Get("class"), vars.Get("shelf"), vars.Get("book"), vars.Get("family"))
	return req, nil
}
func (decoder namedPathGorillaRequestDecoder) EmbedNamedPathOptString(ctx context.Context, r *http.Request) (*EmbedNamedPathRequest, error) {
	req := &EmbedNamedPathRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	if req.Embed == nil {
		req.Embed = &NamedPathRequest{}
	}
	req.Embed.OptString = proto.String(fmt.Sprintf("classes/%s/shelves/%s/books/%s/families/%s", vars.Get("class"), vars.Get("shelf"), vars.Get("book"), vars.Get("family")))
	return req, nil
}
func (decoder namedPathGorillaRequestDecoder) EmbedNamedPathWrapString(ctx context.Context, r *http.Request) (*EmbedNamedPathRequest, error) {
	req := &EmbedNamedPathRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	if req.Embed == nil {
		req.Embed = &NamedPathRequest{}
	}
	req.Embed.WrapString = wrapperspb.String(fmt.Sprintf("classes/%s/shelves/%s/books/%s/families/%s", vars.Get("class"), vars.Get("shelf"), vars.Get("book"), vars.Get("family")))
	return req, nil
}

type namedPathGorillaResponseEncoder struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer v2.ResponseTransformer
}

func (encoder namedPathGorillaResponseEncoder) NamedPathString(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder namedPathGorillaResponseEncoder) NamedPathOptString(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder namedPathGorillaResponseEncoder) NamedPathWrapString(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder namedPathGorillaResponseEncoder) EmbedNamedPathString(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder namedPathGorillaResponseEncoder) EmbedNamedPathOptString(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder namedPathGorillaResponseEncoder) EmbedNamedPathWrapString(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}

type MixPathGorillaService interface {
	MixPath(ctx context.Context, request *MixPathRequest) (*emptypb.Empty, error)
}

func AppendMixPathGorillaRoute(router *mux.Router, service MixPathGorillaService, opts ...v2.Option) *mux.Router {
	options := v2.NewOptions(opts...)
	handler := mixPathGorillaHandler{
		service: service,
		decoder: mixPathGorillaRequestDecoder{
			unmarshalOptions: options.UnmarshalOptions(),
		},
		encoder: mixPathGorillaResponseEncoder{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: v2.DefaultErrorEncoder,
	}
	router.NewRoute().
		Name("/leo.gors.example.path.v1.MixPath/MixPath").
		Methods("GET").
		Path("/v1/{string}/{opt_string}/{wrap_string}/classes/{class}/shelves/{shelf}/books/{book}/families/{family}").
		Handler(handler.MixPath())
	return router
}

type mixPathGorillaHandler struct {
	service      MixPathGorillaService
	decoder      mixPathGorillaRequestDecoder
	encoder      mixPathGorillaResponseEncoder
	errorEncoder v2.ErrorEncoder
}

func (h mixPathGorillaHandler) MixPath() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.MixPath(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.MixPath(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.MixPath(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type mixPathGorillaRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder mixPathGorillaRequestDecoder) MixPath(ctx context.Context, r *http.Request) (*MixPathRequest, error) {
	req := &MixPathRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	if req.Embed == nil {
		req.Embed = &NamedPathRequest{}
	}
	req.Embed.WrapString = wrapperspb.String(fmt.Sprintf("classes/%s/shelves/%s/books/%s/families/%s", vars.Get("class"), vars.Get("shelf"), vars.Get("book"), vars.Get("family")))
	var varErr error
	req.String_ = vars.Get("string")
	req.OptString = proto.String(vars.Get("opt_string"))
	req.WrapString = wrapperspb.String(vars.Get("wrap_string"))
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}

type mixPathGorillaResponseEncoder struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer v2.ResponseTransformer
}

func (encoder mixPathGorillaResponseEncoder) MixPath(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
