// Code generated by protoc-gen-gors-gorilla. DO NOT EDIT.

package body

import (
	context "context"
	v2 "github.com/go-leo/gors/v2"
	mux "github.com/gorilla/mux"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	protojson "google.golang.org/protobuf/encoding/protojson"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	http "net/http"
)

type BodyGorillaService interface {
	StarBody(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	NamedBody(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	NonBody(ctx context.Context, request *emptypb.Empty) (*emptypb.Empty, error)
	HttpBodyStarBody(ctx context.Context, request *httpbody.HttpBody) (*emptypb.Empty, error)
	HttpBodyNamedBody(ctx context.Context, request *HttpBodyRequest) (*emptypb.Empty, error)
}

func AppendBodyGorillaRoute(router *mux.Router, svc BodyGorillaService) *mux.Router {
	handler := BodyGorillaHandler{
		svc: svc,
		decoder: BodyGorillaRequestDecoder{
			unmarshalOptions: protojson.UnmarshalOptions{},
		},
		encoder: BodyGorillaResponseEncoder{
			marshalOptions:   protojson.MarshalOptions{},
			unmarshalOptions: protojson.UnmarshalOptions{},
		},
		errorEncoder: v2.DefaultErrorEncoder,
	}
	router.NewRoute().Name("/leo.gors.body.v1.Body/StarBody").
		Methods("POST").
		Path("/v1/star/body").
		Handler(handler.StarBody())
	router.NewRoute().Name("/leo.gors.body.v1.Body/NamedBody").
		Methods("POST").
		Path("/v1/named/body").
		Handler(handler.NamedBody())
	router.NewRoute().Name("/leo.gors.body.v1.Body/NonBody").
		Methods("GET").
		Path("/v1/user_body").
		Handler(handler.NonBody())
	router.NewRoute().Name("/leo.gors.body.v1.Body/HttpBodyStarBody").
		Methods("PUT").
		Path("/v1/http/body/star/body").
		Handler(handler.HttpBodyStarBody())
	router.NewRoute().Name("/leo.gors.body.v1.Body/HttpBodyNamedBody").
		Methods("PUT").
		Path("/v1/http/body/named/body").
		Handler(handler.HttpBodyNamedBody())
	return router
}

type BodyGorillaHandler struct {
	svc          BodyGorillaService
	decoder      BodyGorillaRequestDecoder
	encoder      BodyGorillaResponseEncoder
	errorEncoder v2.ErrorEncoder
}

func (h BodyGorillaHandler) StarBody() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.StarBody(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.svc.StarBody(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.StarBody(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h BodyGorillaHandler) NamedBody() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.NamedBody(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.svc.NamedBody(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.NamedBody(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h BodyGorillaHandler) NonBody() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.NonBody(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.svc.NonBody(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.NonBody(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h BodyGorillaHandler) HttpBodyStarBody() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.HttpBodyStarBody(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.svc.HttpBodyStarBody(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.HttpBodyStarBody(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h BodyGorillaHandler) HttpBodyNamedBody() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.HttpBodyNamedBody(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.svc.HttpBodyNamedBody(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.HttpBodyNamedBody(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type BodyGorillaRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder BodyGorillaRequestDecoder) StarBody(ctx context.Context, r *http.Request) (*BodyRequest, error) {
	req := &BodyRequest{}
	data, err := io.ReadAll(r.Body)
	if err != nil {
		return nil, err
	}
	if err := decoder.unmarshalOptions.Unmarshal(data, req); err != nil {
		return nil, err
	}
	return req, nil
}
func (decoder BodyGorillaRequestDecoder) NamedBody(ctx context.Context, r *http.Request) (*BodyRequest, error) {
	req := &BodyRequest{}
	data, err := io.ReadAll(r.Body)
	if err != nil {
		return nil, err
	}
	if err := decoder.unmarshalOptions.Unmarshal(data, req.User); err != nil {
		return nil, err
	}
	return req, nil
}
func (decoder BodyGorillaRequestDecoder) NonBody(ctx context.Context, r *http.Request) (*emptypb.Empty, error) {
	req := &emptypb.Empty{}
	return req, nil
}
func (decoder BodyGorillaRequestDecoder) HttpBodyStarBody(ctx context.Context, r *http.Request) (*httpbody.HttpBody, error) {
	req := &httpbody.HttpBody{}
	body, err := io.ReadAll(r.Body)
	if err != nil {
		return nil, err
	}
	req.Data = body
	req.ContentType = r.Header.Get("Content-Type")
	return req, nil
}
func (decoder BodyGorillaRequestDecoder) HttpBodyNamedBody(ctx context.Context, r *http.Request) (*HttpBodyRequest, error) {
	req := &HttpBodyRequest{}
	req.Body = &httpbody.HttpBody{}
	body, err := io.ReadAll(r.Body)
	if err != nil {
		return nil, err
	}
	req.Body.Data = body
	req.Body.ContentType = r.Header.Get("Content-Type")
	return req, nil
}

type BodyGorillaResponseEncoder struct {
	marshalOptions   protojson.MarshalOptions
	unmarshalOptions protojson.UnmarshalOptions
}

func (encoder BodyGorillaResponseEncoder) StarBody(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, resp, encoder.marshalOptions)
}
func (encoder BodyGorillaResponseEncoder) NamedBody(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, resp, encoder.marshalOptions)
}
func (encoder BodyGorillaResponseEncoder) NonBody(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, resp, encoder.marshalOptions)
}
func (encoder BodyGorillaResponseEncoder) HttpBodyStarBody(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, resp, encoder.marshalOptions)
}
func (encoder BodyGorillaResponseEncoder) HttpBodyNamedBody(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, resp, encoder.marshalOptions)
}
