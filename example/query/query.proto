syntax = "proto3";
package leo.gorilla.example.query.v1;
option go_package = "github.com/go-leo/gorilla/example/query/v1;query";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";


service BoolQuery {
  rpc BoolQuery (BoolQueryRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/bool"
    };
  }
}

message BoolQueryRequest {
  bool bool = 1;
  optional bool opt_bool = 2;
  google.protobuf.BoolValue wrap_bool = 3;
  repeated bool list_bool = 4;
  repeated google.protobuf.BoolValue list_wrap_bool = 5;
}

service Int32Query {
  rpc Int32Query (Int32QueryRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/int32"
    };
  }
}

message Int32QueryRequest {
  int32 int32 = 1;
  sint32 sint32 = 2;
  sfixed32 sfixed32 = 3;
  optional int32 opt_int32 = 4;
  optional sint32 opt_sint32 = 5;
  optional sfixed32 opt_sfixed32 = 6;
  google.protobuf.Int32Value wrap_int32 = 7;

  repeated int32 list_int32 = 8;
  repeated sint32 list_sint32 = 9;
  repeated sfixed32 list_sfixed32 = 10;
  repeated google.protobuf.Int32Value list_wrap_int32 = 11;

}



service Int64Query {
  rpc Int64Query (Int64QueryRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/int64"
    };
  }
}

message Int64QueryRequest {
  int64 int64 = 1;
  sint64 sint64 = 2;
  sfixed64 sfixed64 = 3;
  optional int64 opt_int64 = 4;
  optional sint64 opt_sint64 = 5;
  optional sfixed64 opt_sfixed64 = 6;
  google.protobuf.Int64Value wrap_int64 = 7;
  repeated int64 list_int64 = 8;
  repeated sint64 list_sint64 = 9;
  repeated sfixed64 list_sfixed64 = 10;
  repeated google.protobuf.Int64Value list_wrap_int64 = 11;
}

service Uint32Query {
  rpc Uint32Query (Uint32QueryRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/uint32"
    };
  }
}

message Uint32QueryRequest {
  uint32 uint32 = 1;
  fixed32 fixed32 = 2;
  optional uint32 opt_uint32 = 3;
  optional fixed32 opt_fixed32 = 4;
  google.protobuf.UInt32Value wrap_uint32 = 5;

  repeated uint32 list_uint32 = 6;
  repeated fixed32 list_fixed32 = 7;
  repeated google.protobuf.UInt32Value list_wrap_uint32 = 8;
}

service Uint64Query {
  rpc Uint64Query (Uint64QueryRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/uint64"
    };
  }
}

message Uint64QueryRequest {
  uint64 uint64 = 1;
  fixed64 fixed64 = 2;
  optional uint64 opt_uint64 = 3;
  optional fixed64 opt_fixed64 = 4;
  google.protobuf.UInt64Value wrap_uint64 = 5;

  repeated uint64 list_uint64 = 6;
  repeated fixed64 list_fixed64 = 7;
  repeated google.protobuf.UInt64Value list_wrap_uint64 = 8;
}


service FloatQuery {
  rpc FloatQuery (FloatQueryRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/float"
    };
  }
}

message FloatQueryRequest {
  float float = 1;
  optional float opt_float = 2;
  google.protobuf.FloatValue wrap_float = 3;

  repeated float list_float = 4;
  repeated google.protobuf.FloatValue list_wrap_float = 5;
}

service DoubleQuery {
  rpc DoubleQuery (DoubleQueryRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/double"
    };
  }
}

message DoubleQueryRequest {
  double double = 1;
  optional double  opt_double = 2;
  google.protobuf.DoubleValue wrap_double = 3;

  repeated double list_double = 4;
  repeated google.protobuf.DoubleValue list_wrap_double = 5;
}

service StringQuery {
  rpc StringQuery (StringQueryRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/string"
    };
  }
}

message StringQueryRequest {
  string string = 1;
  optional string opt_string = 2;
  google.protobuf.StringValue wrap_string = 3;

  repeated string list_string = 4;
  repeated google.protobuf.StringValue list_wrap_string = 5;
}

service EnumQuery {
  rpc EnumQuery (EnumQueryRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/enum"
    };
  }
}

message EnumQueryRequest {
  enum Status {
    UNKNOWN = 0;
    OK = 1;
    CANCELLED = 2;
    UNKNOWN_ERROR = 3;
  }
  Status status = 1;
  optional Status opt_status = 2;
  repeated Status list_status = 3;
}