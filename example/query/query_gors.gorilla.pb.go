// Code generated by protoc-gen-gors-gorilla. DO NOT EDIT.

package query

import (
	context "context"
	v2 "github.com/go-leo/gors/v2"
	urlx "github.com/go-leo/gox/netx/urlx"
	protox "github.com/go-leo/gox/protox"
	mux "github.com/gorilla/mux"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	http "net/http"
)

type QueryGorillaService interface {
	Query(ctx context.Context, request *QueryRequest) (*emptypb.Empty, error)
}

func AppendQueryGorillaRoute(router *mux.Router, service QueryGorillaService) *mux.Router {
	handler := QueryGorillaHandler{
		service: service,
		decoder: QueryGorillaRequestDecoder{
			unmarshalOptions: protojson.UnmarshalOptions{},
		},
		encoder: QueryGorillaResponseEncoder{
			marshalOptions:   protojson.MarshalOptions{},
			unmarshalOptions: protojson.UnmarshalOptions{},
		},
		errorEncoder: v2.DefaultErrorEncoder,
	}
	router.NewRoute().Name("/leo.gors.query.v1.Query/Query").
		Methods("GET").
		Path("/v1/query").
		Handler(handler.Query())
	return router
}

type QueryGorillaHandler struct {
	service      QueryGorillaService
	decoder      QueryGorillaRequestDecoder
	encoder      QueryGorillaResponseEncoder
	errorEncoder v2.ErrorEncoder
}

func (h QueryGorillaHandler) Query() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.Query(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.Query(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.Query(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type QueryGorillaRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder QueryGorillaRequestDecoder) Query(ctx context.Context, r *http.Request) (*QueryRequest, error) {
	req := &QueryRequest{}
	queries := r.URL.Query()
	var queryErr error
	req.Bool, queryErr = v2.FormDecoder[bool](queryErr, queries, "bool", urlx.GetBool)
	req.Int32, queryErr = v2.FormDecoder[int32](queryErr, queries, "int32", urlx.GetInt)
	req.Sint32, queryErr = v2.FormDecoder[int32](queryErr, queries, "sint32", urlx.GetInt)
	req.Uint32, queryErr = v2.FormDecoder[uint32](queryErr, queries, "uint32", urlx.GetUint)
	req.Int64, queryErr = v2.FormDecoder[int64](queryErr, queries, "int64", urlx.GetInt)
	req.Sint64, queryErr = v2.FormDecoder[int64](queryErr, queries, "sint64", urlx.GetInt)
	req.Uint64, queryErr = v2.FormDecoder[uint64](queryErr, queries, "uint64", urlx.GetUint)
	req.Sfixed32, queryErr = v2.FormDecoder[int32](queryErr, queries, "sfixed32", urlx.GetInt)
	req.Fixed32, queryErr = v2.FormDecoder[uint32](queryErr, queries, "fixed32", urlx.GetUint)
	req.Float, queryErr = v2.FormDecoder[float32](queryErr, queries, "float", urlx.GetFloat)
	req.Sfixed64, queryErr = v2.FormDecoder[int64](queryErr, queries, "sfixed64", urlx.GetInt)
	req.Fixed64, queryErr = v2.FormDecoder[uint64](queryErr, queries, "fixed64", urlx.GetUint)
	req.Double, queryErr = v2.FormDecoder[float64](queryErr, queries, "double", urlx.GetFloat)
	req.String_ = queries.Get("string")
	req.OptBool, queryErr = v2.FormDecoder[*bool](queryErr, queries, "opt_bool", urlx.GetBoolPtr)
	req.OptInt32, queryErr = v2.FormDecoder[*int32](queryErr, queries, "opt_int32", urlx.GetIntPtr)
	req.OptSint32, queryErr = v2.FormDecoder[*int32](queryErr, queries, "opt_sint32", urlx.GetIntPtr)
	req.OptUint32, queryErr = v2.FormDecoder[*uint32](queryErr, queries, "opt_uint32", urlx.GetUintPtr)
	req.OptInt64, queryErr = v2.FormDecoder[*int64](queryErr, queries, "opt_int64", urlx.GetIntPtr)
	req.OptSint64, queryErr = v2.FormDecoder[*int64](queryErr, queries, "opt_sint64", urlx.GetIntPtr)
	req.OptUint64, queryErr = v2.FormDecoder[*uint64](queryErr, queries, "opt_uint64", urlx.GetUintPtr)
	req.OptSfixed32, queryErr = v2.FormDecoder[*int32](queryErr, queries, "opt_sfixed32", urlx.GetIntPtr)
	req.OptFixed32, queryErr = v2.FormDecoder[*uint32](queryErr, queries, "opt_fixed32", urlx.GetUintPtr)
	req.OptFloat, queryErr = v2.FormDecoder[*float32](queryErr, queries, "opt_float", urlx.GetFloatPtr)
	req.OptSfixed64, queryErr = v2.FormDecoder[*int64](queryErr, queries, "opt_sfixed64", urlx.GetIntPtr)
	req.OptFixed64, queryErr = v2.FormDecoder[*uint64](queryErr, queries, "opt_fixed64", urlx.GetUintPtr)
	req.OptDouble, queryErr = v2.FormDecoder[*float64](queryErr, queries, "opt_double", urlx.GetFloatPtr)
	req.OptString = proto.String(queries.Get("opt_string"))
	req.RepBool, queryErr = v2.FormDecoder[[]bool](queryErr, queries, "rep_bool", urlx.GetBoolSlice)
	req.RepInt32, queryErr = v2.FormDecoder[[]int32](queryErr, queries, "rep_int32", urlx.GetIntSlice)
	req.RepSint32, queryErr = v2.FormDecoder[[]int32](queryErr, queries, "rep_sint32", urlx.GetIntSlice)
	req.RepUint32, queryErr = v2.FormDecoder[[]uint32](queryErr, queries, "rep_uint32", urlx.GetUintSlice)
	req.RepInt64, queryErr = v2.FormDecoder[[]int64](queryErr, queries, "rep_int64", urlx.GetIntSlice)
	req.RepSint64, queryErr = v2.FormDecoder[[]int64](queryErr, queries, "rep_sint64", urlx.GetIntSlice)
	req.RepUint64, queryErr = v2.FormDecoder[[]uint64](queryErr, queries, "rep_uint64", urlx.GetUintSlice)
	req.RepSfixed32, queryErr = v2.FormDecoder[[]int32](queryErr, queries, "rep_sfixed32", urlx.GetIntSlice)
	req.RepFixed32, queryErr = v2.FormDecoder[[]uint32](queryErr, queries, "rep_fixed32", urlx.GetUintSlice)
	req.RepFloat, queryErr = v2.FormDecoder[[]float32](queryErr, queries, "rep_float", urlx.GetFloatSlice)
	req.RepSfixed64, queryErr = v2.FormDecoder[[]int64](queryErr, queries, "rep_sfixed64", urlx.GetIntSlice)
	req.RepFixed64, queryErr = v2.FormDecoder[[]uint64](queryErr, queries, "rep_fixed64", urlx.GetUintSlice)
	req.RepDouble, queryErr = v2.FormDecoder[[]float64](queryErr, queries, "rep_double", urlx.GetFloatSlice)
	req.RepString = queries["rep_string"]
	req.WrapDouble, queryErr = v2.FormDecoder[*wrapperspb.DoubleValue](queryErr, queries, "wrap_double", urlx.GetFloat64Value)
	req.WrapFloat, queryErr = v2.FormDecoder[*wrapperspb.FloatValue](queryErr, queries, "wrap_float", urlx.GetFloat32Value)
	req.WrapInt64, queryErr = v2.FormDecoder[*wrapperspb.Int64Value](queryErr, queries, "wrap_int64", urlx.GetInt64Value)
	req.WrapUint64, queryErr = v2.FormDecoder[*wrapperspb.UInt64Value](queryErr, queries, "wrap_uint64", urlx.GetUint64Value)
	req.WrapInt32, queryErr = v2.FormDecoder[*wrapperspb.Int32Value](queryErr, queries, "wrap_int32", urlx.GetInt32Value)
	req.WrapUint32, queryErr = v2.FormDecoder[*wrapperspb.UInt32Value](queryErr, queries, "wrap_uint32", urlx.GetUint32Value)
	req.WrapBool, queryErr = v2.FormDecoder[*wrapperspb.BoolValue](queryErr, queries, "wrap_bool", urlx.GetBoolValue)
	req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
	req.OptWrapDouble, queryErr = v2.FormDecoder[*wrapperspb.DoubleValue](queryErr, queries, "opt_wrap_double", urlx.GetFloat64Value)
	req.OptWrapFloat, queryErr = v2.FormDecoder[*wrapperspb.FloatValue](queryErr, queries, "opt_wrap_float", urlx.GetFloat32Value)
	req.OptWrapInt64, queryErr = v2.FormDecoder[*wrapperspb.Int64Value](queryErr, queries, "opt_wrap_int64", urlx.GetInt64Value)
	req.OptWrapUint64, queryErr = v2.FormDecoder[*wrapperspb.UInt64Value](queryErr, queries, "opt_wrap_uint64", urlx.GetUint64Value)
	req.OptWrapInt32, queryErr = v2.FormDecoder[*wrapperspb.Int32Value](queryErr, queries, "opt_wrap_int32", urlx.GetInt32Value)
	req.OptWrapUint32, queryErr = v2.FormDecoder[*wrapperspb.UInt32Value](queryErr, queries, "opt_wrap_uint32", urlx.GetUint32Value)
	req.OptWrapBool, queryErr = v2.FormDecoder[*wrapperspb.BoolValue](queryErr, queries, "opt_wrap_bool", urlx.GetBoolValue)
	req.OptWrapString = wrapperspb.String(queries.Get("opt_wrap_string"))
	req.RepWrapDouble, queryErr = v2.FormDecoder[[]*wrapperspb.DoubleValue](queryErr, queries, "rep_wrap_double", urlx.GetFloat64ValueSlice)
	req.RepWrapFloat, queryErr = v2.FormDecoder[[]*wrapperspb.FloatValue](queryErr, queries, "rep_wrap_float", urlx.GetFloat32ValueSlice)
	req.RepWrapInt64, queryErr = v2.FormDecoder[[]*wrapperspb.Int64Value](queryErr, queries, "rep_wrap_int64", urlx.GetInt64ValueSlice)
	req.RepWrapUint64, queryErr = v2.FormDecoder[[]*wrapperspb.UInt64Value](queryErr, queries, "rep_wrap_uint64", urlx.GetUint64ValueSlice)
	req.RepWrapInt32, queryErr = v2.FormDecoder[[]*wrapperspb.Int32Value](queryErr, queries, "rep_wrap_int32", urlx.GetInt32ValueSlice)
	req.RepWrapUint32, queryErr = v2.FormDecoder[[]*wrapperspb.UInt32Value](queryErr, queries, "rep_wrap_uint32", urlx.GetUint32ValueSlice)
	req.RepWrapBool, queryErr = v2.FormDecoder[[]*wrapperspb.BoolValue](queryErr, queries, "rep_wrap_bool", urlx.GetBoolValueSlice)
	req.RepWrapString = protox.WrapStringSlice(queries["rep_wrap_string"])
	req.Status, queryErr = v2.FormDecoder[QueryRequest_Status](queryErr, queries, "status", urlx.GetInt[QueryRequest_Status])
	req.OptStatus, queryErr = v2.FormDecoder[*QueryRequest_Status](queryErr, queries, "opt_status", urlx.GetIntPtr[QueryRequest_Status])
	req.RepStatus, queryErr = v2.FormDecoder[[]QueryRequest_Status](queryErr, queries, "rep_status", urlx.GetIntSlice[QueryRequest_Status])
	if queryErr != nil {
		return nil, queryErr
	}
	return req, nil
}

type QueryGorillaResponseEncoder struct {
	marshalOptions   protojson.MarshalOptions
	unmarshalOptions protojson.UnmarshalOptions
}

func (encoder QueryGorillaResponseEncoder) Query(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, resp, encoder.marshalOptions)
}
