// Code generated by protoc-gen-gors-gorilla. DO NOT EDIT.

package endpointsapis

import (
	context "context"
	fmt "fmt"
	v2 "github.com/go-leo/gors/v2"
	errorx "github.com/go-leo/gox/errorx"
	urlx "github.com/go-leo/gox/netx/urlx"
	mux "github.com/gorilla/mux"
	protojson "google.golang.org/protobuf/encoding/protojson"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	http "net/http"
)

type WorkspacesGorillaService interface {
	ListWorkspaces(ctx context.Context, request *ListWorkspacesRequest) (*ListWorkspacesResponse, error)
	GetWorkspace(ctx context.Context, request *GetWorkspaceRequest) (*Workspace, error)
	CreateWorkspace(ctx context.Context, request *CreateWorkspaceRequest) (*Workspace, error)
	UpdateWorkspace(ctx context.Context, request *UpdateWorkspaceRequest) (*Workspace, error)
	DeleteWorkspace(ctx context.Context, request *DeleteWorkspaceRequest) (*emptypb.Empty, error)
}

func AppendWorkspacesGorillaRoute(router *mux.Router, svc WorkspacesGorillaService) *mux.Router {
	handler := WorkspacesGorillaHandler{
		svc: svc,
		decoder: WorkspacesGorillaRequestDecoder{
			unmarshalOptions: protojson.UnmarshalOptions{},
		},
		encoder: WorkspacesGorillaResponseEncoder{
			marshalOptions:   protojson.MarshalOptions{},
			unmarshalOptions: protojson.UnmarshalOptions{},
		},
		errorEncoder: v2.DefaultErrorEncoder,
	}
	router.NewRoute().Name("/google.example.endpointsapis.v1.Workspaces/ListWorkspaces").
		Methods("GET").
		Path("/v1/projects/{project}/locations/{location}/workspaces").
		Handler(handler.ListWorkspaces())
	router.NewRoute().Name("/google.example.endpointsapis.v1.Workspaces/GetWorkspace").
		Methods("GET").
		Path("/v1/projects/{project}/locations/{location}/workspaces/{workspac}").
		Handler(handler.GetWorkspace())
	router.NewRoute().Name("/google.example.endpointsapis.v1.Workspaces/CreateWorkspace").
		Methods("POST").
		Path("/v1/projects/{project}/locations/{location}/workspaces").
		Handler(handler.CreateWorkspace())
	router.NewRoute().Name("/google.example.endpointsapis.v1.Workspaces/UpdateWorkspace").
		Methods("PATCH").
		Path("/v1/projects/{project}/locations/{location}/Workspaces/{Workspac}").
		Handler(handler.UpdateWorkspace())
	router.NewRoute().Name("/google.example.endpointsapis.v1.Workspaces/DeleteWorkspace").
		Methods("DELETE").
		Path("/v1/projects/{project}/locations/{location}/workspaces/{workspac}").
		Handler(handler.DeleteWorkspace())
	return router
}

type WorkspacesGorillaHandler struct {
	svc          WorkspacesGorillaService
	decoder      WorkspacesGorillaRequestDecoder
	encoder      WorkspacesGorillaResponseEncoder
	errorEncoder v2.ErrorEncoder
}

func (h WorkspacesGorillaHandler) ListWorkspaces() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.ListWorkspaces(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.svc.ListWorkspaces(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.ListWorkspaces(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h WorkspacesGorillaHandler) GetWorkspace() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.GetWorkspace(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.svc.GetWorkspace(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.GetWorkspace(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h WorkspacesGorillaHandler) CreateWorkspace() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.CreateWorkspace(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.svc.CreateWorkspace(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.CreateWorkspace(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h WorkspacesGorillaHandler) UpdateWorkspace() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.UpdateWorkspace(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.svc.UpdateWorkspace(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.UpdateWorkspace(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h WorkspacesGorillaHandler) DeleteWorkspace() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.DeleteWorkspace(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.svc.DeleteWorkspace(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.DeleteWorkspace(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type WorkspacesGorillaRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder WorkspacesGorillaRequestDecoder) ListWorkspaces(ctx context.Context, r *http.Request) (*ListWorkspacesRequest, error) {
	req := &ListWorkspacesRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Parent = fmt.Sprintf("projects/%s/locations/%s", vars.Get("project"), vars.Get("location"))
	if varErr != nil {
		return nil, varErr
	}
	queries := r.URL.Query()
	var queryErr error
	req.PageSize, queryErr = errorx.Break[int32](queryErr)(urlx.GetInt[int32](queries, "page_size"))
	req.PageToken = queries.Get("page_token")
	if queryErr != nil {
		return nil, queryErr
	}
	return req, nil
}
func (decoder WorkspacesGorillaRequestDecoder) GetWorkspace(ctx context.Context, r *http.Request) (*GetWorkspaceRequest, error) {
	req := &GetWorkspaceRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Name = fmt.Sprintf("projects/%s/locations/%s/workspaces/%s", vars.Get("project"), vars.Get("location"), vars.Get("workspac"))
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}
func (decoder WorkspacesGorillaRequestDecoder) CreateWorkspace(ctx context.Context, r *http.Request) (*CreateWorkspaceRequest, error) {
	req := &CreateWorkspaceRequest{}
	data, err := io.ReadAll(r.Body)
	if err != nil {
		return nil, err
	}
	if err := decoder.unmarshalOptions.Unmarshal(data, req.Workspace); err != nil {
		return nil, err
	}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Parent = fmt.Sprintf("projects/%s/locations/%s", vars.Get("project"), vars.Get("location"))
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}
func (decoder WorkspacesGorillaRequestDecoder) UpdateWorkspace(ctx context.Context, r *http.Request) (*UpdateWorkspaceRequest, error) {
	req := &UpdateWorkspaceRequest{}
	data, err := io.ReadAll(r.Body)
	if err != nil {
		return nil, err
	}
	if err := decoder.unmarshalOptions.Unmarshal(data, req.Workspace); err != nil {
		return nil, err
	}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Name = fmt.Sprintf("projects/%s/locations/%s/Workspaces/%s", vars.Get("project"), vars.Get("location"), vars.Get("Workspac"))
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}
func (decoder WorkspacesGorillaRequestDecoder) DeleteWorkspace(ctx context.Context, r *http.Request) (*DeleteWorkspaceRequest, error) {
	req := &DeleteWorkspaceRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Name = fmt.Sprintf("projects/%s/locations/%s/workspaces/%s", vars.Get("project"), vars.Get("location"), vars.Get("workspac"))
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}

type WorkspacesGorillaResponseEncoder struct {
	marshalOptions   protojson.MarshalOptions
	unmarshalOptions protojson.UnmarshalOptions
}

func (encoder WorkspacesGorillaResponseEncoder) ListWorkspaces(ctx context.Context, w http.ResponseWriter, resp *ListWorkspacesResponse) error {
	return v2.ResponseEncoder(ctx, w, resp, encoder.marshalOptions)
}
func (encoder WorkspacesGorillaResponseEncoder) GetWorkspace(ctx context.Context, w http.ResponseWriter, resp *Workspace) error {
	return v2.ResponseEncoder(ctx, w, resp, encoder.marshalOptions)
}
func (encoder WorkspacesGorillaResponseEncoder) CreateWorkspace(ctx context.Context, w http.ResponseWriter, resp *Workspace) error {
	return v2.ResponseEncoder(ctx, w, resp, encoder.marshalOptions)
}
func (encoder WorkspacesGorillaResponseEncoder) UpdateWorkspace(ctx context.Context, w http.ResponseWriter, resp *Workspace) error {
	return v2.ResponseEncoder(ctx, w, resp, encoder.marshalOptions)
}
func (encoder WorkspacesGorillaResponseEncoder) DeleteWorkspace(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, resp, encoder.marshalOptions)
}
