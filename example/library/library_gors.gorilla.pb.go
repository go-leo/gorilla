// Code generated by protoc-gen-gors-gorilla. DO NOT EDIT.

package library

import (
	context "context"
	fmt "fmt"
	jsonx "github.com/go-leo/gox/encodingx/jsonx"
	errorx "github.com/go-leo/gox/errorx"
	urlx "github.com/go-leo/gox/netx/urlx"
	mux "github.com/gorilla/mux"
	protojson "google.golang.org/protobuf/encoding/protojson"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
)

type LibraryServiceGorillaService interface {
	CreateShelf(ctx context.Context, request *CreateShelfRequest) (*Shelf, error)
	GetShelf(ctx context.Context, request *GetShelfRequest) (*Shelf, error)
	ListShelves(ctx context.Context, request *ListShelvesRequest) (*ListShelvesResponse, error)
	DeleteShelf(ctx context.Context, request *DeleteShelfRequest) (*emptypb.Empty, error)
	MergeShelves(ctx context.Context, request *MergeShelvesRequest) (*Shelf, error)
	CreateBook(ctx context.Context, request *CreateBookRequest) (*Book, error)
	GetBook(ctx context.Context, request *GetBookRequest) (*Book, error)
	ListBooks(ctx context.Context, request *ListBooksRequest) (*ListBooksResponse, error)
	DeleteBook(ctx context.Context, request *DeleteBookRequest) (*emptypb.Empty, error)
	UpdateBook(ctx context.Context, request *UpdateBookRequest) (*Book, error)
	MoveBook(ctx context.Context, request *MoveBookRequest) (*Book, error)
}

func AppendLibraryServiceGorillaRoute(router *mux.Router, svc LibraryServiceGorillaService) *mux.Router {
	transports := newLibraryServiceGorillaTransports(svc)
	router.NewRoute().Name("/google.example.library.v1.LibraryService/CreateShelf").
		Methods("POST").
		Path("/v1/shelves").
		Handler(transports.CreateShelf())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/GetShelf").
		Methods("GET").
		Path("/v1/shelves/{shelf}").
		Handler(transports.GetShelf())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/ListShelves").
		Methods("GET").
		Path("/v1/shelves").
		Handler(transports.ListShelves())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/DeleteShelf").
		Methods("DELETE").
		Path("/v1/shelves/{shelf}").
		Handler(transports.DeleteShelf())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/MergeShelves").
		Methods("POST").
		Path("/v1/shelves/{shelf}:merge").
		Handler(transports.MergeShelves())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/CreateBook").
		Methods("POST").
		Path("/v1/shelves/{shelf}/books").
		Handler(transports.CreateBook())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/GetBook").
		Methods("GET").
		Path("/v1/shelves/{shelf}/books/{book}").
		Handler(transports.GetBook())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/ListBooks").
		Methods("GET").
		Path("/v1/shelves/{shelf}/books").
		Handler(transports.ListBooks())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/DeleteBook").
		Methods("DELETE").
		Path("/v1/shelves/{shelf}/books/{book}").
		Handler(transports.DeleteBook())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/UpdateBook").
		Methods("PATCH").
		Path("/v1/shelves/{shelf}/books/{book}").
		Handler(transports.UpdateBook())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/MoveBook").
		Methods("POST").
		Path("/v1/shelves/{shelf}/books/{book}:move").
		Handler(transports.MoveBook())
	return router
}

type LibraryServiceGorillaTransports struct {
	svc     LibraryServiceGorillaService
	decoder *LibraryServiceGorillaRequestDecoder
	encoder *LibraryServiceGorillaResponseEncoder
}

func (t *LibraryServiceGorillaTransports) CreateShelf() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := t.decoder.CreateShelf(ctx, request)
		if err != nil {
			return
		}
		out, err := t.svc.CreateShelf(ctx, in)
		if err != nil {
			return
		}
		if err := t.encoder.CreateShelf(ctx, writer, out); err != nil {
			return
		}
	})
}

func (t *LibraryServiceGorillaTransports) GetShelf() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := t.decoder.GetShelf(ctx, request)
		if err != nil {
			return
		}
		out, err := t.svc.GetShelf(ctx, in)
		if err != nil {
			return
		}
		if err := t.encoder.GetShelf(ctx, writer, out); err != nil {
			return
		}
	})
}

func (t *LibraryServiceGorillaTransports) ListShelves() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := t.decoder.ListShelves(ctx, request)
		if err != nil {
			return
		}
		out, err := t.svc.ListShelves(ctx, in)
		if err != nil {
			return
		}
		if err := t.encoder.ListShelves(ctx, writer, out); err != nil {
			return
		}
	})
}

func (t *LibraryServiceGorillaTransports) DeleteShelf() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := t.decoder.DeleteShelf(ctx, request)
		if err != nil {
			return
		}
		out, err := t.svc.DeleteShelf(ctx, in)
		if err != nil {
			return
		}
		if err := t.encoder.DeleteShelf(ctx, writer, out); err != nil {
			return
		}
	})
}

func (t *LibraryServiceGorillaTransports) MergeShelves() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := t.decoder.MergeShelves(ctx, request)
		if err != nil {
			return
		}
		out, err := t.svc.MergeShelves(ctx, in)
		if err != nil {
			return
		}
		if err := t.encoder.MergeShelves(ctx, writer, out); err != nil {
			return
		}
	})
}

func (t *LibraryServiceGorillaTransports) CreateBook() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := t.decoder.CreateBook(ctx, request)
		if err != nil {
			return
		}
		out, err := t.svc.CreateBook(ctx, in)
		if err != nil {
			return
		}
		if err := t.encoder.CreateBook(ctx, writer, out); err != nil {
			return
		}
	})
}

func (t *LibraryServiceGorillaTransports) GetBook() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := t.decoder.GetBook(ctx, request)
		if err != nil {
			return
		}
		out, err := t.svc.GetBook(ctx, in)
		if err != nil {
			return
		}
		if err := t.encoder.GetBook(ctx, writer, out); err != nil {
			return
		}
	})
}

func (t *LibraryServiceGorillaTransports) ListBooks() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := t.decoder.ListBooks(ctx, request)
		if err != nil {
			return
		}
		out, err := t.svc.ListBooks(ctx, in)
		if err != nil {
			return
		}
		if err := t.encoder.ListBooks(ctx, writer, out); err != nil {
			return
		}
	})
}

func (t *LibraryServiceGorillaTransports) DeleteBook() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := t.decoder.DeleteBook(ctx, request)
		if err != nil {
			return
		}
		out, err := t.svc.DeleteBook(ctx, in)
		if err != nil {
			return
		}
		if err := t.encoder.DeleteBook(ctx, writer, out); err != nil {
			return
		}
	})
}

func (t *LibraryServiceGorillaTransports) UpdateBook() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := t.decoder.UpdateBook(ctx, request)
		if err != nil {
			return
		}
		out, err := t.svc.UpdateBook(ctx, in)
		if err != nil {
			return
		}
		if err := t.encoder.UpdateBook(ctx, writer, out); err != nil {
			return
		}
	})
}

func (t *LibraryServiceGorillaTransports) MoveBook() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := t.decoder.MoveBook(ctx, request)
		if err != nil {
			return
		}
		out, err := t.svc.MoveBook(ctx, in)
		if err != nil {
			return
		}
		if err := t.encoder.MoveBook(ctx, writer, out); err != nil {
			return
		}
	})
}

func newLibraryServiceGorillaTransports(svc LibraryServiceGorillaService) *LibraryServiceGorillaTransports {
	return &LibraryServiceGorillaTransports{
		svc:     svc,
		decoder: &LibraryServiceGorillaRequestDecoder{},
		encoder: &LibraryServiceGorillaResponseEncoder{},
	}
}

type LibraryServiceGorillaRequestDecoder struct {
}

func (*LibraryServiceGorillaRequestDecoder) CreateShelf(ctx context.Context, r *http.Request) (*CreateShelfRequest, error) {
	req := &CreateShelfRequest{}
	if err := jsonx.NewDecoder(r.Body).Decode(&req.Shelf); err != nil {
		return nil, err
	}
	return req, nil
}
func (*LibraryServiceGorillaRequestDecoder) GetShelf(ctx context.Context, r *http.Request) (*GetShelfRequest, error) {
	req := &GetShelfRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Name = fmt.Sprintf("shelves/%s", vars.Get("shelf"))
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}
func (*LibraryServiceGorillaRequestDecoder) ListShelves(ctx context.Context, r *http.Request) (*ListShelvesRequest, error) {
	req := &ListShelvesRequest{}
	queries := r.URL.Query()
	var queryErr error
	req.PageSize, queryErr = errorx.Break[int32](queryErr)(urlx.GetInt[int32](queries, "page_size"))
	req.PageToken = queries.Get("page_token")
	if queryErr != nil {
		return nil, queryErr
	}
	return req, nil
}
func (*LibraryServiceGorillaRequestDecoder) DeleteShelf(ctx context.Context, r *http.Request) (*DeleteShelfRequest, error) {
	req := &DeleteShelfRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Name = fmt.Sprintf("shelves/%s", vars.Get("shelf"))
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}
func (*LibraryServiceGorillaRequestDecoder) MergeShelves(ctx context.Context, r *http.Request) (*MergeShelvesRequest, error) {
	req := &MergeShelvesRequest{}
	if err := jsonx.NewDecoder(r.Body).Decode(req); err != nil {
		return nil, err
	}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Name = fmt.Sprintf("shelves/%s", vars.Get("shelf"))
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}
func (*LibraryServiceGorillaRequestDecoder) CreateBook(ctx context.Context, r *http.Request) (*CreateBookRequest, error) {
	req := &CreateBookRequest{}
	if err := jsonx.NewDecoder(r.Body).Decode(&req.Book); err != nil {
		return nil, err
	}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Parent = fmt.Sprintf("shelves/%s", vars.Get("shelf"))
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}
func (*LibraryServiceGorillaRequestDecoder) GetBook(ctx context.Context, r *http.Request) (*GetBookRequest, error) {
	req := &GetBookRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Name = fmt.Sprintf("shelves/%s/books/%s", vars.Get("shelf"), vars.Get("book"))
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}
func (*LibraryServiceGorillaRequestDecoder) ListBooks(ctx context.Context, r *http.Request) (*ListBooksRequest, error) {
	req := &ListBooksRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Parent = fmt.Sprintf("shelves/%s", vars.Get("shelf"))
	if varErr != nil {
		return nil, varErr
	}
	queries := r.URL.Query()
	var queryErr error
	req.PageSize, queryErr = errorx.Break[int32](queryErr)(urlx.GetInt[int32](queries, "page_size"))
	req.PageToken = queries.Get("page_token")
	if queryErr != nil {
		return nil, queryErr
	}
	return req, nil
}
func (*LibraryServiceGorillaRequestDecoder) DeleteBook(ctx context.Context, r *http.Request) (*DeleteBookRequest, error) {
	req := &DeleteBookRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Name = fmt.Sprintf("shelves/%s/books/%s", vars.Get("shelf"), vars.Get("book"))
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}
func (*LibraryServiceGorillaRequestDecoder) UpdateBook(ctx context.Context, r *http.Request) (*UpdateBookRequest, error) {
	req := &UpdateBookRequest{}
	if err := jsonx.NewDecoder(r.Body).Decode(&req.Book); err != nil {
		return nil, err
	}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	if req.Book == nil {
		req.Book = &Book{}
	}
	req.Book.Name = fmt.Sprintf("shelves/%s/books/%s", vars.Get("shelf"), vars.Get("book"))
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}
func (*LibraryServiceGorillaRequestDecoder) MoveBook(ctx context.Context, r *http.Request) (*MoveBookRequest, error) {
	req := &MoveBookRequest{}
	if err := jsonx.NewDecoder(r.Body).Decode(req); err != nil {
		return nil, err
	}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Name = fmt.Sprintf("shelves/%s/books/%s", vars.Get("shelf"), vars.Get("book"))
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}

type LibraryServiceGorillaResponseEncoder struct {
}

func (*LibraryServiceGorillaResponseEncoder) CreateShelf(ctx context.Context, w http.ResponseWriter, resp *Shelf) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	data, err := protojson.MarshalOptions{}.Marshal(resp)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}
func (*LibraryServiceGorillaResponseEncoder) GetShelf(ctx context.Context, w http.ResponseWriter, resp *Shelf) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	data, err := protojson.MarshalOptions{}.Marshal(resp)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}
func (*LibraryServiceGorillaResponseEncoder) ListShelves(ctx context.Context, w http.ResponseWriter, resp *ListShelvesResponse) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	data, err := protojson.MarshalOptions{}.Marshal(resp)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}
func (*LibraryServiceGorillaResponseEncoder) DeleteShelf(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	data, err := protojson.MarshalOptions{}.Marshal(resp)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}
func (*LibraryServiceGorillaResponseEncoder) MergeShelves(ctx context.Context, w http.ResponseWriter, resp *Shelf) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	data, err := protojson.MarshalOptions{}.Marshal(resp)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}
func (*LibraryServiceGorillaResponseEncoder) CreateBook(ctx context.Context, w http.ResponseWriter, resp *Book) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	data, err := protojson.MarshalOptions{}.Marshal(resp)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}
func (*LibraryServiceGorillaResponseEncoder) GetBook(ctx context.Context, w http.ResponseWriter, resp *Book) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	data, err := protojson.MarshalOptions{}.Marshal(resp)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}
func (*LibraryServiceGorillaResponseEncoder) ListBooks(ctx context.Context, w http.ResponseWriter, resp *ListBooksResponse) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	data, err := protojson.MarshalOptions{}.Marshal(resp)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}
func (*LibraryServiceGorillaResponseEncoder) DeleteBook(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	data, err := protojson.MarshalOptions{}.Marshal(resp)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}
func (*LibraryServiceGorillaResponseEncoder) UpdateBook(ctx context.Context, w http.ResponseWriter, resp *Book) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	data, err := protojson.MarshalOptions{}.Marshal(resp)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}
func (*LibraryServiceGorillaResponseEncoder) MoveBook(ctx context.Context, w http.ResponseWriter, resp *Book) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	data, err := protojson.MarshalOptions{}.Marshal(resp)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}
