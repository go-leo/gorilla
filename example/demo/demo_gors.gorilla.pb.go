// Code generated by protoc-gen-gors-gorilla. DO NOT EDIT.

package demo

import (
	context "context"
	v2 "github.com/go-leo/gors/v2"
	urlx "github.com/go-leo/gox/netx/urlx"
	mux "github.com/gorilla/mux"
	protojson "google.golang.org/protobuf/encoding/protojson"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
)

type DemoGorillaService interface {
	CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error)
	DeleteUser(ctx context.Context, request *DeleteUserRequest) (*emptypb.Empty, error)
	ModifyUser(ctx context.Context, request *ModifyUserRequest) (*emptypb.Empty, error)
	GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error)
	ListUser(ctx context.Context, request *ListUserRequest) (*ListUserResponse, error)
}

func AppendDemoGorillaRoute(router *mux.Router, service DemoGorillaService, opts ...v2.Option) *mux.Router {
	options := v2.NewOptions(opts...)
	handler := demoGorillaHandler{
		service: service,
		decoder: demoGorillaRequestDecoder{
			unmarshalOptions: options.UnmarshalOptions(),
		},
		encoder: demoGorillaResponseEncoder{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder: v2.DefaultErrorEncoder,
	}
	router.NewRoute().
		Name("/leo.gors.demo.v1.Demo/CreateUser").
		Methods("POST").
		Path("/v1/user").
		Handler(handler.CreateUser())
	router.NewRoute().
		Name("/leo.gors.demo.v1.Demo/DeleteUser").
		Methods("DELETE").
		Path("/v1/user/{id}").
		Handler(handler.DeleteUser())
	router.NewRoute().
		Name("/leo.gors.demo.v1.Demo/ModifyUser").
		Methods("PUT").
		Path("/v1/user/{id}").
		Handler(handler.ModifyUser())
	router.NewRoute().
		Name("/leo.gors.demo.v1.Demo/GetUser").
		Methods("GET").
		Path("/v1/user/{id}").
		Handler(handler.GetUser())
	router.NewRoute().
		Name("/leo.gors.demo.v1.Demo/ListUser").
		Methods("GET").
		Path("/v1/users").
		Handler(handler.ListUser())
	return router
}

type demoGorillaHandler struct {
	service      DemoGorillaService
	decoder      demoGorillaRequestDecoder
	encoder      demoGorillaResponseEncoder
	errorEncoder v2.ErrorEncoder
}

func (h demoGorillaHandler) CreateUser() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.CreateUser(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.CreateUser(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.CreateUser(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h demoGorillaHandler) DeleteUser() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.DeleteUser(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.DeleteUser(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.DeleteUser(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h demoGorillaHandler) ModifyUser() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.ModifyUser(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.ModifyUser(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.ModifyUser(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h demoGorillaHandler) GetUser() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.GetUser(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.GetUser(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.GetUser(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h demoGorillaHandler) ListUser() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.ListUser(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.ListUser(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.ListUser(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type demoGorillaRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder demoGorillaRequestDecoder) CreateUser(ctx context.Context, r *http.Request) (*CreateUserRequest, error) {
	req := &CreateUserRequest{}
	if err := v2.RequestDecoder(ctx, r, req, decoder.unmarshalOptions); err != nil {
		return nil, err
	}
	return req, nil
}
func (decoder demoGorillaRequestDecoder) DeleteUser(ctx context.Context, r *http.Request) (*DeleteUserRequest, error) {
	req := &DeleteUserRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Id, varErr = v2.FormDecoder[int64](varErr, vars, "id", urlx.GetInt)
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}
func (decoder demoGorillaRequestDecoder) ModifyUser(ctx context.Context, r *http.Request) (*ModifyUserRequest, error) {
	req := &ModifyUserRequest{}
	if err := v2.RequestDecoder(ctx, r, req, decoder.unmarshalOptions); err != nil {
		return nil, err
	}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Id, varErr = v2.FormDecoder[int64](varErr, vars, "id", urlx.GetInt)
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}
func (decoder demoGorillaRequestDecoder) GetUser(ctx context.Context, r *http.Request) (*GetUserRequest, error) {
	req := &GetUserRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Id, varErr = v2.FormDecoder[int64](varErr, vars, "id", urlx.GetInt)
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}
func (decoder demoGorillaRequestDecoder) ListUser(ctx context.Context, r *http.Request) (*ListUserRequest, error) {
	req := &ListUserRequest{}
	queries := r.URL.Query()
	var queryErr error
	req.PageNum, queryErr = v2.FormDecoder[int64](queryErr, queries, "page_num", urlx.GetInt)
	req.PageSize, queryErr = v2.FormDecoder[int64](queryErr, queries, "page_size", urlx.GetInt)
	if queryErr != nil {
		return nil, queryErr
	}
	return req, nil
}

type demoGorillaResponseEncoder struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer v2.ResponseTransformer
}

func (encoder demoGorillaResponseEncoder) CreateUser(ctx context.Context, w http.ResponseWriter, resp *CreateUserResponse) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder demoGorillaResponseEncoder) DeleteUser(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder demoGorillaResponseEncoder) ModifyUser(ctx context.Context, w http.ResponseWriter, resp *emptypb.Empty) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder demoGorillaResponseEncoder) GetUser(ctx context.Context, w http.ResponseWriter, resp *GetUserResponse) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder demoGorillaResponseEncoder) ListUser(ctx context.Context, w http.ResponseWriter, resp *ListUserResponse) error {
	return v2.ResponseEncoder(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
