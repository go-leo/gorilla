package generator

import (
	"github.com/go-leo/gors/v2/cmd/internal"
	"google.golang.org/protobuf/compiler/protogen"
	"strconv"
)

type Generator struct {
	Plugin   *protogen.Plugin
	File     *protogen.File
	Services []*internal.Service
}

func NewGenerator(plugin *protogen.Plugin, file *protogen.File) (*Generator, error) {
	services, err := internal.NewServices(file)
	if err != nil {
		return nil, err
	}
	return &Generator{Plugin: plugin, File: file, Services: services}, nil
}

func (f *Generator) Generate() error {
	return f.GenerateFile()
}

func (f *Generator) GenerateFile() error {
	file := f.File
	filename := file.GeneratedFilenamePrefix + "_gors.gorilla.pb.go"
	g := f.Plugin.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-gors-gorilla. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	services, err := internal.NewServices(file)
	if err != nil {
		return err
	}

	for _, service := range services {
		if err := f.GenerateServices(service, g); err != nil {
			return err
		}
		if err := f.GenerateAppendServerFunc(service, g); err != nil {
			return err
		}
		if err := f.GenerateHandlers(service, g); err != nil {
			return err
		}
		if err := f.GenerateServerRequestDecoder(service, g); err != nil {
			return err
		}
		if err := f.GenerateServerResponseEncoder(service, g); err != nil {
			return err
		}
	}
	return nil
}

func (f *Generator) GenerateServices(service *internal.Service, g *protogen.GeneratedFile) error {
	g.P("type ", service.GorillaServiceName(), " interface {")
	for _, endpoint := range service.Endpoints {
		g.P(endpoint.Name(), "(ctx ", internal.ContextIdent, ", request *", endpoint.InputGoIdent(), ") (*", endpoint.OutputGoIdent(), ", error)")
	}
	g.P("}")
	g.P()
	return nil
}

func (f *Generator) GenerateAppendServerFunc(service *internal.Service, g *protogen.GeneratedFile) error {
	g.P("func ", service.AppendGorillaRouteName(), "(router *", internal.MuxPackage.Ident("Router"), ", svc ", service.GorillaServiceName(), ") ", "*", internal.MuxPackage.Ident("Router"), " {")
	g.P("handler :=  ", service.GorillaHandlerName(), "{")
	g.P("svc: svc,")
	g.P("decoder: ", service.GorillaRequestDecoderName(), "{")
	g.P("unmarshalOptions: ", internal.ProtoJsonPackage.Ident("UnmarshalOptions"), "{},")
	g.P("},")
	g.P("encoder: ", service.GorillaResponseEncoderName(), "{")
	g.P("marshalOptions:   ", internal.ProtoJsonPackage.Ident("MarshalOptions"), "{},")
	g.P("unmarshalOptions: ", internal.ProtoJsonPackage.Ident("UnmarshalOptions"), "{},")
	g.P("},")
	g.P("errorEncoder: ", internal.DefaultErrorEncoderIdent, ",")
	g.P("}")
	for _, endpoint := range service.Endpoints {
		httpRule := endpoint.HttpRule()
		// 调整路径，来适应 github.com/gorilla/mux 路由规则
		path, _, _, _ := httpRule.RegularizePath(httpRule.Path())
		g.P("router.NewRoute().Name(", strconv.Quote(endpoint.FullName()), ").")
		g.P("Methods(", strconv.Quote(httpRule.Method()), ").")
		g.P("Path(", strconv.Quote(path), ").")
		g.P("Handler(handler.", endpoint.Name(), "())")
	}
	g.P("return router")
	g.P("}")
	g.P()
	return nil
}

func (f *Generator) GenerateHandlers(service *internal.Service, g *protogen.GeneratedFile) error {
	g.P("type ", service.GorillaHandlerName(), " struct {")
	g.P("svc ", service.GorillaServiceName())
	g.P("decoder ", service.GorillaRequestDecoderName())
	g.P("encoder ", service.GorillaResponseEncoderName())
	g.P("errorEncoder ", internal.ErrorEncoderIdent)
	g.P("}")
	g.P()
	for _, endpoint := range service.Endpoints {
		g.P("func (h ", service.GorillaHandlerName(), ")", endpoint.Name(), "()", internal.HttpPackage.Ident("Handler"), " {")
		g.P("return ", internal.HttpPackage.Ident("HandlerFunc"), "(func(writer ", internal.HttpPackage.Ident("ResponseWriter"), ", request *", internal.HttpPackage.Ident("Request"), ") {")
		g.P("ctx := request.Context()")
		g.P("in, err := h.decoder.", endpoint.Name(), "(ctx, request)")
		g.P("if err != nil {")
		g.P("h.errorEncoder(ctx, err, writer)")
		g.P("return")
		g.P("}")
		g.P("out, err := h.svc.", endpoint.Name(), "(ctx, in)")
		g.P("if err != nil {")
		g.P("h.errorEncoder(ctx, err, writer)")
		g.P("return")
		g.P("}")
		g.P("if err := h.encoder.", endpoint.Name(), "(ctx, writer, out); err != nil {")
		g.P("h.errorEncoder(ctx, err, writer)")
		g.P("return")
		g.P("}")
		g.P("})")
		g.P("}")
		g.P()
	}
	return nil
}
