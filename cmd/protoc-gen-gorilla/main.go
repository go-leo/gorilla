package main

import (
	"flag"
	"fmt"
	"os"
	"path/filepath"

	"github.com/go-leo/gorilla/cmd/protoc-gen-gorilla/server"
	"github.com/go-leo/gorilla/internal/gen"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"
)

var flags flag.FlagSet

func main() {
	if len(os.Args) == 2 && os.Args[1] == "--version" {
		fmt.Fprintf(os.Stdout, "%v %v\n", filepath.Base(os.Args[0]), "v1.0.4")
		os.Exit(0)
	}
	options := &protogen.Options{ParamFunc: flags.Set}
	options.Run(func(plugin *protogen.Plugin) error {
		plugin.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)
		return generate(plugin)
	})
}

func generate(plugin *protogen.Plugin) error {
	for _, file := range plugin.Files {
		if !file.Generate {
			continue
		}
		if len(file.Services) <= 0 {
			continue
		}
		services, err := gen.NewServices(file)
		if err != nil {
			return err
		}
		filename := file.GeneratedFilenamePrefix + "_gorilla.pb.go"
		g := plugin.NewGeneratedFile(filename, file.GoImportPath)
		g.P("// Code generated by protoc-gen-gorilla. DO NOT EDIT.")
		g.P()
		g.P("package ", file.GoPackageName)
		g.P()

		for _, service := range services {
			srvGen := new(server.Generator)
			if err := srvGen.GenerateServices(service, g); err != nil {
				return err
			}
			if err := srvGen.GenerateAppendServerFunc(service, g); err != nil {
				return err
			}
			if err := srvGen.GenerateHandlers(service, g); err != nil {
				return err
			}
			if err := srvGen.GenerateDecodeRequest(service, g); err != nil {
				return err
			}
			if err := srvGen.GenerateEncodeResponse(service, g); err != nil {
				return err
			}
		}
	}
	return nil
}
